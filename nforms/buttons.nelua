
-- button module - Created on 27-Feb-2023
--[[
	For properties & Events, see the declaration of Button record in controls.nelu.
	Private fields are starting with underscore.

	Important functions of Button record
	---------------------------------------
	Button.new - Constructor
	Button:createHandle() - Create handle of Button
	Button:setForeColor() - Set button text color
	Button:setBackColor() - Set back ground color
	Button:setGradientColor() - Set gradient back ground

]]

require "nforms.api_messages"
require "nforms.apifuncs"
-- require "nforms.forms"
require "nforms.common"
require 'nforms.controls'

local BS_NOTIFY <comptime> = 0x00004000
local BS_DEFPUSHBUTTON <comptime> = 0x00000001
local b_style <comptime> =  WS_CHILD | BS_NOTIFY | WS_TABSTOP | WS_VISIBLE
local b_ex_style <comptime> = 0
local b_txt_flag : UINT <comptime> = DT_SINGLELINE | DT_VCENTER | DT_CENTER | DT_HIDEPREFIX
local mouse_clicked: DWORD_PTR = 0b1
local mouse_over: DWORD_PTR = 0b1000000
local btn_round_factor: cint = 5
local btnNumber = 1
local btnClass = toUTF16("Button")
-- local btnClassName : []WCHAR = {66, 85, 84, 84, 79, 78, 0} --BUTTON -- I dropped this idea.

local function btnWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT <forwarddecl> end


function Button:createHandle() <forwarddecl> end
global ButtonParams = @record
{
	parent: *Form, text: string, xpos: integer, ypos: integer,
	width: integer, height: integer,  evtFn: EventHandler
}

-- Public function
function Button.new(params: ButtonParams) : *Button
	local this : *Button = default_allocator:new(@Button)
	this.name = string.format("Button_%d", btnNumber)
	this.className = btnClass
	this.text = params.text == "" and this.name or params.text
	this.width = params.width == 0 and 120 or params.width
	this.height = params.height == 0 and 35 or params.height
	this.xpos = params.xpos == 0 and 10 or params.xpos
	this.ypos = params.ypos == 0 and 10 or params.ypos
	this.font = params.parent.font
	this.parent = params.parent
	this._style = WS_CHILD | WS_TABSTOP | WS_VISIBLE | BS_NOTIFY
	this._exStyle = 0
	this._isTextable = true
	this.cid = params.parent._cidNumber
	btnNumber = btnNumber + 1
	if params.evtFn ~= nilptr then this.onClick = params.evtFn end
	this.parent._controls:push({this, ControlType.Button})
	params.parent._cidNumber = params.parent._cidNumber + 1
	-- testControl(this)
	if params.parent.createChilds then this:createHandle() end

	return this
end

--Private function
function FlatDraw:init(clr: Color)
	self.defBrush = CreateSolidBrush(clr.ref)
	self.hotBrush = CreateSolidBrush(clr:getHotColor2(25).ref)
	self.defPen = CreatePen(PS_SOLID, 1, clr:getHotColor(0.6).ref)
	self.hotPen = CreatePen(PS_SOLID, 1, clr:getHotColor(0.3).ref)
end



--Private function
function GradDraw:init(c1: uinteger, c2: uinteger)
	self.defGC.c1 = Color.new(c1)
	self.defGC.c2 = Color.new(c2)

	local adj1: number = self.defGC.c1:isDark() and 1.5 or 1.2
	local adj2: number = self.defGC.c2:isDark() and 1.5 or 1.2

	self.hotGC.c1 = self.defGC.c1:changeColor(adj1)
	self.hotGC.c2 = self.defGC.c2:changeColor(adj2)

	self.defPen = CreatePen(PS_SOLID, 1, self.defGC.c1:getHotColor(0.6).ref)
	self.hotPen = CreatePen(PS_SOLID, 1, self.defGC.c1:getHotColor(0.3).ref)
end

--Private function
function FlatDraw:destroy()
	if self.defBrush ~= nilptr then DeleteObject(self.defBrush) end
	if self.hotBrush ~= nilptr then DeleteObject(self.hotBrush) end
	if self.defPen ~= nilptr then DeleteObject(self.defPen) end
	if self.hotPen ~= nilptr then DeleteObject(self.hotPen) end
	-- print("flat draw resources destroyed")
end

--Private function
function GradDraw:destroy()
	if self.defPen ~= nilptr then DeleteObject(self.defPen) end
	if self.hotPen ~= nilptr then DeleteObject(self.hotPen) end
	-- print("Grad draw resources destroyed")
end


-- Public function
function Button:createHandle()
		
	createControl(self)
	if self._isCreated then
		setSubClass(self.handle, (pointer)(self), btnWndProc)
	end
end

function Button:addContextMenu(items: span(string))
	self.contextMenu = ContextMenu.new(self)
	self.contextMenu:addItems(items)
end

function Button:setText(txt: string)
	self.text = txt
	if self._isCreated then	setControlText(self.handle, txt) end
end

--Private function
function Button:destroy()
	switch self._drawFlag do
		case 2, 3 then self._fdraw:destroy()
		case 4, 5 then self._gdraw:destroy()
	end
	self = nilptr
end

-- Public function
function Button:setForeColor(clr: uinteger)
	self.foreColor = Color.new(clr)
	if (self._drawFlag & 1) ~= 1 then self._drawFlag = self._drawFlag + 1 end
	invalidateNow(self)
end

-- Public function
function Button:setBackColor(clr: uinteger)
	self.backColor = Color.new(clr)
	if (self._drawFlag & 2) ~= 2 then self._drawFlag = self._drawFlag + 2 end
	self._fdraw:init(self.backColor)
	invalidateNow(self)
end

-- Public function
function Button:setGradientColor(clr1: uinteger, clr2: uinteger)
	self._gdraw:init(clr1, clr2)
	if (self._drawFlag & 4) ~= 4 then self._drawFlag = self._drawFlag + 4 end
	invalidateNow(self)
end

--Private function
local function setBtnForColorInternal(this: *Button, nmcd: *NMCUSTOMDRAW): LRESULT
	SetTextColor(nmcd.hdc, this.foreColor.ref)
	SetBkMode(nmcd.hdc, 1)
	DrawTextW(nmcd.hdc, toUTF16(this.text), -1, &nmcd.rc, b_txt_flag)
	return CDRF_NOTIFYPOSTPAINT
end

--Private function
local function paintFlatButton(hdc: HDC, rc: RECT, hbr: HBRUSH, pen: HPEN)
	SelectObject(hdc, hbr)
	SelectObject(hdc, pen)
	RoundRect(hdc, rc.left, rc.top, rc.right, rc.bottom, btn_round_factor, btn_round_factor)
	FillPath(hdc)
end

local function paintGradientButton(hdc: HDC, rc: RECT, gc: GradColor, pen: HPEN)
	local gBrush: HBRUSH = createGradientBrush(hdc, rc, gc.c1, gc.c2, true)
	defer DeleteObject(gBrush) end
	SelectObject(hdc, pen)
	SelectObject(hdc, gBrush)
	RoundRect(hdc, rc.left, rc.top, rc.right, rc.bottom, btn_round_factor, btn_round_factor)
	FillPath(hdc)
end


local function setBtnBackColorInternal(this: *Button, nmcd: *NMCUSTOMDRAW): LRESULT
	switch nmcd.dwDrawStage do
	case CDDS_PREERASE then return CDRF_NOTIFYPOSTERASE
	case CDDS_PREPAINT then
		if (nmcd.uItemState & mouse_clicked) == mouse_clicked then
			paintFlatButton(nmcd.hdc, nmcd.rc, this._fdraw.defBrush, this._fdraw.hotPen)
		elseif (nmcd.uItemState & mouse_over) == mouse_over then
			paintFlatButton(nmcd.hdc, nmcd.rc, this._fdraw.hotBrush, this._fdraw.hotPen)
		else
			paintFlatButton(nmcd.hdc, nmcd.rc, this._fdraw.defBrush, this._fdraw.defPen)
		end
		return CDRF_DODEFAULT
	end
	return CDRF_DODEFAULT
end

local function setBtnGradientColorInternal(this: *Button, nmcd: *NMCUSTOMDRAW): LRESULT
	switch nmcd.dwDrawStage do
	case CDDS_PREERASE then return CDRF_NOTIFYPOSTERASE
	case CDDS_PREPAINT then
		if (nmcd.uItemState & mouse_clicked) == mouse_clicked then
			paintGradientButton(nmcd.hdc, nmcd.rc, this._gdraw.defGC, this._gdraw.hotPen)
		elseif (nmcd.uItemState & mouse_over) == mouse_over then
			paintGradientButton(nmcd.hdc, nmcd.rc, this._gdraw.hotGC, this._gdraw.hotPen)
		else
			paintGradientButton(nmcd.hdc, nmcd.rc, this._gdraw.defGC, this._gdraw.defPen)
		end
		return CDRF_DODEFAULT
	end
	return CDRF_DODEFAULT
end

local function btnWmNotifyHandler(this: *Button, lp: LPARAM): LRESULT
	local ret = CDRF_DODEFAULT
	if this._drawFlag then
		local nmcd = (@*NMCUSTOMDRAW)(lp)
		switch this._drawFlag do
			case 1 then return setBtnForColorInternal(this, nmcd)
			case 2 then return setBtnBackColorInternal(this, nmcd)
			case 3 then
				setBtnBackColorInternal(this, nmcd)
				return setBtnForColorInternal(this, nmcd)
			case 4 then return setBtnGradientColorInternal(this, nmcd)
			case 5 then
				setBtnGradientColorInternal(this, nmcd)
				return setBtnForColorInternal(this, nmcd)
		end
	end
	return ret
end

function btnWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT
	local this = (@*Button)((pointer)(refData))
	switch msg do
	case WM_DESTROY then
	    RemoveWindowSubclass(hw, btnWndProc, scID)
		this:destroy()

	case WM_CONTEXTMENU then
		if this.contextMenu ~= nilptr then this.contextMenu:show(lpm) end
		
	case WM_LBUTTONDOWN then leftMouseDownHandler(this, msg, wpm, lpm)
	case WM_LBUTTONUP then leftMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_LB_CLICK then leftMouseClickHandler(this)
	case WM_RBUTTONDOWN then rightMouseDownHandler(this, msg, wpm, lpm)
	case WM_RBUTTONUP then rightMouseUpHandler(this, msg, wpm, lpm)
	-- case MM_MOUSE_RB_CLICK then rightMouseClickHandler(this)
	case WM_MOUSEHWHEEL then mouseScrollHandler(this, msg, wpm, lpm)
	case WM_MOUSEMOVE then mouseMoveHandler(this, msg, wpm, lpm)
	case WM_MOUSELEAVE then mouseLeaveHandler(this)
	case MM_NOTIFY_REFLECT then	return btnWmNotifyHandler(this, lpm)
	end
	return DefSubclassProc(hw, msg, wpm, lpm)
end
