
-- RadioButton module - Created on 10-Mar-2023 07:49 PM

require "nforms.api_messages"
require "nforms.apifuncs"
require "nforms.forms"
require "nforms.common"

--Constants
	local BS_AUTORADIOBUTTON <comptime> = 0x00000009
	local BCM_GETIDEALSIZE <comptime> = 0x1601
	local BS_RIGHTBUTTON <comptime> = 0x00000200
	local BM_SETCHECK <comptime> = 0x00F1
--End

local rbNumber = 1
local rbClass = toUTF16("Button")
local function rbWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT <forwarddecl> end

global RadioButton = @record {
	name : string,
	text : string,
	className: LPCWSTR,
	handle : HWND,
	cid: integer,
	width : integer,
	height : integer,
	xpos : integer,
	ypos : integer,
	font: Font,
	parent : *Form,
	backColor: Color,
	foreColor: Color,
	autoSize: boolean,
    checked: boolean,
    checkOnClick: boolean,
	rightAlign: boolean,
	--Private fields
	_isCreated: boolean,
	_isTextable: boolean,
	_style: DWORD,
	_exStyle: DWORD,
	_lbDown: boolean,
	_rbDown: boolean,
	_isMouseEntered: boolean,
	_drawFlag: uinteger,
	_bkBrush: HBRUSH,
    _dwTxtFlag: UINT,
	--Events
	onMouseDown: MouseEventHandler,
	onMouseUp: MouseEventHandler,
	onClick: EventHandler,
	onRightMouseDown: MouseEventHandler,
	onRightMouseUp: MouseEventHandler,
	onRightClick: EventHandler,
	onMouseScroll: MouseEventHandler,
	onMouseEnter: EventHandler,
	onMouseMove: MouseEventHandler,
	onMouseLeave: EventHandler,
	onCheckedChanged: EventHandler,
	-- onKeyUp: KeyEventHandler,
	-- onKeyPress: KeyEventHandler,
}

function RadioButton:createHandle() <forwarddecl> end
global RadioButtonParams = @record
{
	parent: *Form, text: string, xpos: integer, ypos: integer,
	width: integer, height: integer,  create: boolean, evtFn: EventHandler
}

-- Public function
function RadioButton.new(params: RadioButtonParams) : *RadioButton
	local this : *RadioButton = default_allocator:new(@RadioButton)
	this.name = string.format("RadioButton_%d", rbNumber)
	this.className = rbClass
	this.text = params.text == "" and this.name or params.text
	this.width = params.width
	this.height = params.height
	this.xpos = params.xpos == 0 and 20 or params.xpos
	this.ypos = params.ypos == 0 and 20 or params.ypos
	this.font = params.parent.font
	this.parent = params.parent
	this.cid = params.parent._cidNumber
	this._style = WS_CHILD | WS_VISIBLE | BS_AUTORADIOBUTTON
	this._exStyle = WS_EX_LTRREADING | WS_EX_LEFT
    this._dwTxtFlag = DT_SINGLELINE | DT_VCENTER
	this._isTextable = false
	this.backColor = params.parent.backColor
	this.foreColor = colorBlack
    this.autoSize = true
    rbNumber = rbNumber + 1
	params.parent._cidNumber = params.parent._cidNumber + 1
	this.onCheckedChanged = params.evtFn
	if params.create then this:createHandle() end
	return this
end

--Private function
function RadioButton:setCbStyle()
	if self.rightAlign then
		self._style = self._style | BS_RIGHTBUTTON
		self._dwTxtFlag = self._dwTxtFlag | DT_RIGHT
    end
    if self.checkOnClick then self._style = self._style ^ BS_AUTORADIOBUTTON end
    self._bkBrush = CreateSolidBrush(self.backColor.ref)
end

--Private function
function RadioButton:setSize()
    local ss : SIZE
    SendMessageW(self.handle, BCM_GETIDEALSIZE, 0, (LPARAM)(&ss));
    self.width = ss.cx;
    self.height = ss.cy;
    SetWindowPos(self.handle, nilptr, self.xpos, self.ypos, self.width, self.height, SWP_NOMOVE)
end

-- Public function
function RadioButton:createHandle()
	self:setCbStyle()
	createControl(self)
	if self._isCreated then
        self:setSize()
		setSubClass(self.handle, (pointer)(self), rbWndProc)
        if self.checked then SendMessageW(self.handle, BM_SETCHECK, 0x0001, 0) end
	end
end

function RadioButton:setText(txt: string)
	self.text = txt
	if self._isCreated then	setControlText(self.handle, txt) end
end

function RadioButton:getText(txt: string): string
	if self._isCreated then
		local wstr = getControlText(self.handle)
		self.text = toUTF8(wstr)
		return self.text
	else
		return self.text
	end
end

function RadioButton:setForeColor(clr: uinteger)
	self.foreColor = Color.new(clr)
	if (self._drawFlag & 1) ~= 1 then self._drawFlag = self._drawFlag + 1 end
	invalidateNow(self)
end

function RadioButton:setBackColor(clr: uinteger)
	self.backColor = Color.new(clr)
	self._bkBrush = CreateSolidBrush(self.backColor.ref)
	if (self._drawFlag & 2) ~= 2 then self._drawFlag = self._drawFlag + 2 end
	invalidateNow(self)
end

--Private function
function RadioButton:destroy()
	DeleteObject(self._bkBrush)
	self = nilptr
end

function rbWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT
	local this = (@*RadioButton)((pointer)(refData))
	switch msg do
	case WM_DESTROY then
	    RemoveWindowSubclass(hw, rbWndProc, scID)
		this:destroy()

	case WM_LBUTTONDOWN then leftMouseDownHandler(this, msg, wpm, lpm)
	case WM_LBUTTONUP then leftMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_LB_CLICK then leftMouseClickHandler(this)
	case WM_RBUTTONDOWN then rightMouseDownHandler(this, msg, wpm, lpm)
	case WM_RBUTTONUP then rightMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_RB_CLICK then rightMouseClickHandler(this)
	case WM_MOUSEHWHEEL then mouseScrollHandler(this, msg, wpm, lpm)
	case WM_MOUSEMOVE then mouseMoveHandler(this, msg, wpm, lpm)
	case WM_MOUSELEAVE then mouseLeaveHandler(this)
    case MM_CTL_COMMAND then
        if hiWord(wpm) == 0 then
            this.checked = SendMessageW(hw, BM_GETCHECK, 0, 0) == 1 and true or false
            if this.onCheckedChanged ~= nilptr then
                local ea = EventArgs {}
                this.onCheckedChanged(this, &ea)
            end
        end

	case MM_LABEL_COLOR then
        local hdc = (HDC)(wpm)
        SetBkColor(hdc, this.backColor.ref)
		return (LRESULT)(this._bkBrush)

    case MM_NOTIFY_REFLECT then
        local nmc = (@LPNMCUSTOMDRAW)(lpm)
        switch nmc.dwDrawStage do
            case CDDS_PREERASE then return CDRF_NOTIFYPOSTERASE
            case CDDS_PREPAINT then
                local rct = nmc.rc
                if not this.rightAlign then  -- Adjusing rect. Otherwise, text will be drawn upon the check area
                    rct.left = rct.left + 18
                else
                    rct.right = rct.right - 18
                end
                SetTextColor(nmc.hdc, this.foreColor.ref)
                DrawTextW(nmc.hdc, toUTF16(this.text), -1, &rct, this._dwTxtFlag)
                return CDRF_SKIPDEFAULT
        end
	end
	return DefSubclassProc(hw, msg, wpm, lpm)
end
