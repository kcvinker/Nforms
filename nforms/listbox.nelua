-- ListBox module - Created on 11-Mar-2023 02:36 PM

require "nforms.api_messages"
require "nforms.apifuncs"
require "nforms.controls"
require "nforms.common"

--Constants
	local LBS_NOTIFY <comptime> = 0x00000001
	local LBS_HASSTRINGS <comptime> = 0x00000040
	local LBS_SORT <comptime> = 0x00000002
	local LBS_EXTENDEDSEL <comptime> = 0x00000800
	local LBS_MULTIPLESEL <comptime> = 0x00000008
	local LBS_MULTICOLUMN <comptime> = 0x00002000
	local LBS_NOSEL <comptime> = 0x00000000

	local LBS_WANTKEYBOARDINPUT <comptime> = 0x00000400
	local WS_HSCROLL <comptime> = 0x00100000
	local WS_VSCROLL <comptime> = 0x00200000

	local LB_ADDSTRING <comptime> = 0x0180
	local LB_GETCURSEL <comptime> = 0x0188
	local LB_SETCURSEL <comptime> = 0x0186
	local LB_GETSELCOUNT <comptime> = 0x0190
	local LB_GETSELITEMS <comptime> = 0x0191
	local LB_RESETCONTENT <comptime> = 0x0184

	local LB_GETTEXT <comptime> = 0x0189
	local LB_GETTEXTLEN <comptime> = 0x018A
	local LB_SETSEL <comptime> = 0x0185
	local LB_GETCARETINDEX <comptime> = 0x019F

	local LBN_ERRSPACE <comptime> = -2
	local LBN_SELCHANGE <comptime> = 1
	local LBN_DBLCLK <comptime> = 2
	local LBN_SELCANCEL <comptime> = 3
	local LBN_SETFOCUS <comptime> = 4
	local LBN_KILLFOCUS <comptime> = 5
	local LB_ERR <comptime> = -1
--End

local lbxNumber = 1
local lbxClass = toUTF16("ListBox")
local function lbxWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT <forwarddecl> end



function ListBox:createHandle() <forwarddecl> end
global ListBoxParams = @record
{
	parent: *Form, xpos: integer, ypos: integer,
	width: integer, height: integer
}

-- Public function
function ListBox.new(params: ListBoxParams) : *ListBox
	local this : *ListBox = default_allocator:new(@ListBox)
	this.name = string.format("ListBox_%d", lbxNumber)
	this.className = lbxClass
	this.width = params.width == 0 and 150 or params.width
	this.height = params.height == 0 and 180 or params.height
	this.xpos = params.xpos == 0 and 20 or params.xpos
	this.ypos = params.ypos == 0 and 20 or params.ypos
	this.font = params.parent.font
	this.parent = params.parent
	this.cid = params.parent._cidNumber
	this._style = WS_VISIBLE | WS_CHILD | WS_BORDER  | LBS_NOTIFY | LBS_HASSTRINGS
	this._exStyle = 0
	this.backColor = colorWhite
	this.foreColor = colorBlack
    lbxNumber = lbxNumber + 1
	params.parent._cidNumber = params.parent._cidNumber + 1
	if params.parent.createChilds then this:createHandle() end
	return this
end

function ListBox:addContextMenu(items: span(string))
	self.contextMenu = ContextMenu.new(self)
	self.contextMenu:addItems(items)
end

--Private function
function ListBox:setLbxStyle()
	if self.hasSort then self._style = self._style | LBS_SORT end
    if self.multiSelection then self._style = self._style | LBS_EXTENDEDSEL | LBS_MULTIPLESEL end
    if self.multiColumn then self._style = self._style | LBS_MULTICOLUMN end
    if self.noSelection then self._style = self._style | LBS_NOSEL end
    if self.keyPreview then self._style = self._style | LBS_WANTKEYBOARDINPUT end
    if self.useHScroll then self._style = self._style | WS_HSCROLL end
    if self.useVScroll then self._style = self._style | WS_VSCROLL end
    self._bkBrush = CreateSolidBrush(self.backColor.ref)
end

--Private function
function ListBox:fillItems()
	if self.items.size > 0 then
		for _, item in ipairs(self.items) do
			SendMessageW(self.handle, LB_ADDSTRING, 0, (@LPARAM)(toUTF16(item)))
		end
	end
end

--Private function
function ListBox:clearItemsInternal()
	SendMessageW(self.handle, LB_RESETCONTENT, 0, 0)
    UpdateWindow(self.handle)
end

--Private function
function ListBox:getItemInternal(index: integer): string
	local result : string
	local tLen = SendMessageW(self.handle, LB_GETTEXTLEN, index, 0)
	if tLen ~= LB_ERR then
		local buffer: span(WCHAR) = default_allocator:spanalloc(@WCHAR, tLen + 1)
		SendMessageW(self.handle, LB_GETTEXT, index, (@LPARAM)(&buffer[0]))
		buffer[tLen] = 0
		result = wcharArrayToString(&buffer[0], tLen + 1)
	end
	return result
end

-- Public function
function ListBox:createHandle()
	self:setLbxStyle()
	createControl(self)
	if self._isCreated then
		setSubClass(self.handle, (pointer)(self), lbxWndProc)
        self:fillItems()
	end
end

function ListBox:addItem(item: auto)
	self.items:push(tostring(item))
	if self._isCreated then
		SendMessageW(self.handle, LB_ADDSTRING, 0, (@LPARAM)(toUTF16(item)))
	end
end

function ListBox:addItems(...: varargs)
	## for i=1,select('#', ...) do
		local sitem = tostring(#[select(i, ...)]#)
		self.items:push(sitem)
		if self._isCreated then
			SendMessageW(self.handle, LB_ADDSTRING, 0, (@LPARAM)(toUTF16(sitem)))
		end
	## end
end

function ListBox:removeItem(item : auto )
	local myItem = tostring(item)
	if #self.items > 0 then
		self.items:removevalue(myItem)
		if self._isCreated then -- Remove item from combo also.
			self:clearItemsInternal()
			for _, item in ipairs(self.items) do
				SendMessageW(self.handle, LB_ADDSTRING, 0, (@LPARAM)(toUTF16(item)))
			end
		end
	end
end

function ListBox:removeItemAt(index : integer )
	if #self.items > 0 then
		self.items:remove(index)
		if self._isCreated then
			self:clearItemsInternal()
			for _, item in ipairs(self.items) do
				SendMessageW(self.handle, LB_ADDSTRING, 0, (@LPARAM)(toUTF16(item)))
			end
		end
	end
end

function ListBox:removeAll()
	if #self.items > 0 then
		self.items:clear()
		if self._isCreated then
			SendMessageW(self.handle, LB_RESETCONTENT, 0, 0)
		end
	end
end

function ListBox:getSelectedIndex(): integer
	if self._isCreated then
		self.selectedIndex = (integer)(SendMessageW(self.handle, LB_GETCURSEL, 0, 0))
		return self.selectedIndex
	end
	return -1
end

function ListBox:setSelectedIndex(value: integer)
	if self._isCreated then
		SendMessageW(self.handle, LB_SETCURSEL, value, 0)
	end
	self.selectedIndex = value
end

function ListBox:getSelectedIndices(value: integer): vector(integer)
	local selItems : vector(integer)
	if self.multiSelection and self._isCreated then
		local selCount = SendMessageW(self.handle, LB_GETSELCOUNT, 0, 0)
		if selCount ~= LB_ERR then
			selItems:reserve(selCount)
			SendMessageW(self.handle, LB_GETSELITEMS, selCount, (@LPARAM)(&selItems[0]))
		end
	end
	return selItems
end

function ListBox:setSelectedItem(): string
	if self._isCreated and self.selectedIndex > -1 then
		return self:getItemInternal(self.selectedIndex)
	end
	return ""
end

function ListBox:setSelectedItems(): vector(string)
	local result : vector(string)
	if self._isCreated then
		local selCount = SendMessageW(self.handle, LB_GETSELCOUNT, 0, 0)
		if selCount ~= LB_ERR then
			local iBuffer : span(integer) = default_allocator:spanalloc(@integer, selCount)
			result:resize(selCount)
			SendMessageW(self.handle, LB_GETSELITEMS, selCount, (@LPARAM)(&iBuffer[0]))
			for _, i in ipairs(iBuffer) do result:push(self:getItemInternal(i)) end
		end
	end
	return result
end

function ListBox:selectAll()
	if self._isCreated and self.multiSelection then
		SendMessageW(self.handle, LB_SETSEL, 1, -1 )
	end
end

function ListBox:clearSelection()
	if self._isCreated then
		if self.multiSelection then
			SendMessageW(self.handle, LB_SETSEL, 0, -1 )
		else
			SendMessageW(self.handle, LB_SETCURSEL, 0, 0 )
		end
	end
end

function ListBox:getIndex(item: auto): integer
	local sItem = tostring(item)
	return (@integer)(SendMessageW(self.handle, LB_FINDSTRINGEXACT, -1, toUTF16(sItem)))
end

function ListBox:getHotIndex(): integer
	if self.multiSelection then
		return (@integer)(SendMessageW(self.handle, LB_GETCARETINDEX, 0, 0))
	end
	return -1
end

function ListBox:getHotItem(): string
	if self.multiSelection then
		local index = (@integer)(SendMessageW(self.handle, LB_GETCARETINDEX, 0, 0))
		if index > -1 then return self:getItemInternal(index) end
	end
	return ""
end

function ListBox:getItem(index: integer): string
	local iLen = (@integer)(SendMessageW(self.handle, LB_GETTEXTLEN, index, 0))
	if index ~= LB_ERR then return self:getItemInternal(index) end
	return ""
end

function ListBox:setForeColor(clr: uinteger)
	self.foreColor = Color.new(clr)
	if (self._drawFlag & 1) ~= 1 then self._drawFlag = self._drawFlag + 1 end
	invalidateNow(self)
end

function ListBox:setBackColor(clr: uinteger)
	self.backColor = Color.new(clr)
	self._bkBrush = CreateSolidBrush(self.backColor.ref)
	if (self._drawFlag & 2) ~= 2 then self._drawFlag = self._drawFlag + 2 end
	invalidateNow(self)
end

--Private function
function ListBox:destroy()
	DeleteObject(self._bkBrush)
	self = nilptr
end

function lbxWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT
	local this = (@*ListBox)((pointer)(refData))
	switch msg do
	case WM_DESTROY then
	    RemoveWindowSubclass(hw, lbxWndProc, scID)
		this:destroy()

	case WM_LBUTTONDOWN then leftMouseDownHandler(this, msg, wpm, lpm)
	case WM_LBUTTONUP then leftMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_LB_CLICK then leftMouseClickHandler(this)
	case WM_RBUTTONDOWN then rightMouseDownHandler(this, msg, wpm, lpm)
	case WM_RBUTTONUP then rightMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_RB_CLICK then rightMouseClickHandler(this)
	case WM_MOUSEHWHEEL then mouseScrollHandler(this, msg, wpm, lpm)
	case WM_MOUSEMOVE then mouseMoveHandler(this, msg, wpm, lpm)
	case WM_MOUSELEAVE then mouseLeaveHandler(this)
	-- case WM_KEYDOWN then keyDownHandler(this, wpm)
	-- case WM_KEYUP then keyUpHandler(this, wpm)
	-- case WM_CHAR then keyPressHandler(this, wpm)
	case WM_CONTEXTMENU then
		if this.contextMenu ~= nilptr then this.contextMenu:show(lpm) end
		
    case MM_CTL_COMMAND then
		local nCode = hiWord(wpm)
		switch nCode do
			case LBN_DBLCLK then
				if this.onDoubleClick ~= nilptr then
					local ea : EventArgs = {}
					this.onDoubleClick(this, &ea)
				end
			case LBN_KILLFOCUS then
				if this.onLostFocus ~= nilptr then
					local ea : EventArgs = {}
					this.onLostFocus(this, &ea)
				end
			case LBN_SELCHANGE then
				if not this.multiSelection then
					local selIndx = SendMessageW(this.handle, LB_GETCURSEL, 0, 0)
					if selIndx ~= LB_ERR then
						this.selectedIndex = (@integer)(selIndx)
						if this.onSelectionChanged ~= nilptr then
							local ea : EventArgs = {}
							this.onSelectionChanged(this, ea)
						end
					end
				end
			case LBN_SETFOCUS then
				if this.onGotFocus ~= nilptr then
					local ea : EventArgs = {}
					this.onGotFocus(this, &ea)
				end
			-- case LBN_SELCANCEL then
		end

	case MM_LIST_COLOR then
        if this._drawFlag > 0 then
			local hdc = (HDC)(wpm)
			if (this._drawFlag & 1) == 1 then SetTextColor(hdc, this.foreColor.ref) end
			if (this._drawFlag & 2) == 2 then SetBkColor(hdc, this.backColor.ref) end
		end
		return (LRESULT)(this._bkBrush)
	end
	return DefSubclassProc(hw, msg, wpm, lpm)
end
