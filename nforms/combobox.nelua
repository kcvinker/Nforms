
-- ComboBox module - Created on 10-Mar-2023 08:06 PM


require "nforms.api_messages"
require "nforms.apifuncs"
require "nforms.forms"
require "nforms.common"

--Constants
	local CBS_DROPDOWNLIST <comptime> = 0x0003
	local CBS_DROPDOWN <comptime> = 0x0002
	local CB_GETCOMBOBOXINFO <comptime> = 0x0164
	local CB_ADDSTRING <comptime> = 0x0143
	local CB_SETCURSEL <comptime> = 0x014E
	-- local ES_NOHIDESEL <comptime> = 256
	-- local ES_READONLY <comptime> = 0x800
	-- local ES_LOWERCASE <comptime> = 16
	-- local ES_UPPERCASE <comptime> = 8

	-- local ES_NUMBER <comptime> = 0x2000
	-- local ES_PASSWORD <comptime> = 32
	-- local ES_CENTER <comptime> = 1
	-- local ES_RIGHT <comptime> = 2
	-- local EM_SETCUEBANNER <comptime> = ECM_FIRST + 1
--End

-- local cbStyle <comptime> =  WS_VISIBLE | WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | SS_NOTIFY
-- local cbExStyle <comptime> = 0 --WS_EX_LEFT|WS_EX_LTRREADING|WS_EX_CLIENTEDGE|WS_EX_NOPARENTNOTIFY
local cmbNumber = 1
local function cmbWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT <forwarddecl> end
local function cmbEditWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT <forwarddecl> end

global ComboBox = @record
{
	name : string,
	text : string,
	className: LPCWSTR,
	handle : HWND,
	cid: integer,
	width : integer,
	height : integer,
	xpos : integer,
	ypos : integer,
	font: Font,
	parent : *Form,
	backColor: Color,
	foreColor: Color,
    items: span(string),
    selectedIndex: integer,
    enableInput: boolean,


	--Private fields
	_isCreated: boolean,
	_isTextable: boolean,
	_style: DWORD,
	_exStyle: DWORD,
	_lbDown: boolean,
	_rbDown: boolean,
	_isMouseEntered: boolean,
	_recreateEnabled: boolean,
	_drawFlag: uinteger,
	_bkBrush: HBRUSH,
    _oldHwnd: HWND,
    _dwTxtFlag: UINT,

	--Events
	onMouseDown: MouseEventHandler,
	onMouseUp: MouseEventHandler,
	onClick: EventHandler,
	onRightMouseDown: MouseEventHandler,
	onRightMouseUp: MouseEventHandler,
	onRightClick: EventHandler,
	onMouseScroll: MouseEventHandler,
	onMouseEnter: EventHandler,
	onMouseMove: MouseEventHandler,
	onMouseLeave: EventHandler,
	onCheckedChanged: EventHandler,
	-- onKeyUp: KeyEventHandler,
	-- onKeyPress: KeyEventHandler,
}

-- Public function
function ComboBox.new(frm : *Form, x: integer, y: integer, w: integer, h: integer) : ComboBox
	local this : ComboBox
	this.name = string.format("ComboBox_%d", cmbNumber)
	this.className = toUTF16("ComboBox")
	this.width = w == 0 and 120 or 1
	this.height = h == 0 and 30 or h
	this.xpos = x == 0 and 20 or x
	this.ypos = y == 0 and 20 or y
	this.font = frm.font
	this.parent = frm
	this.cid = frm._cidNumber
	this._style = WS_CHILD | WS_VISIBLE
	this._exStyle = WS_EX_CLIENTEDGE
	this.backColor = frm.backColor
	this.foreColor = colorBlack


    cmbNumber = cmbNumber + 1
	frm._cidNumber = frm._cidNumber + 1
	return this
end

function ComboBox:setCbStyle()
	if self.enableInput then
		self._style = self._style | CBS_DROPDOWNLIST
	else
		self._style = self._style | CBS_DROPDOWN
    end
	if self._bkBrush == nilptr then self._bkBrush = CreateSolidBrush(self.backColor.ref) end
end




function ComboBox:afterCreationJobs()
	self._oldHwnd = self.handle
	setSubClass(self.handle, (pointer)(self), cmbWndProc)

	local cmbInfo: COMBOBOXINFO
	cmbInfo.cbSize = #COMBOBOXINFO
	SendMessageW(self.handle, CB_GETCOMBOBOXINFO, 0, (LPARAM)(&cmbInfo))
	-- self.parent.cmb_dict[cmbInfo.hwndList] = self.handle -- Put the handle in parent's dic
	SetWindowSubclass(cmbInfo.hwndItem, &cmbEditWndProc, subClassID, (@DWORD_PTR)(self))
	subClassID = subClassID + 1

	if #self.items > 0 then
		for i, item in ipairs(self.items) do
			SendMessageW(self.handle, CB_ADDSTRING, 0, (@LPARAM)(toUTF16(item)))
		end
	end

end

-- Public function
function ComboBox:createHandle()
	self:setCbStyle()
	createControl(self)
	if self._isCreated then
		self:afterCreationJobs()
		if self.selectedIndex > -1 then
			SendMessageW(self.handle, CB_SETCURSEL, (@WPARAM)(self.selectedIndex), 0)
		end
        self._recreateEnabled = false
	end
end

-- function ComboBox:setText(txt: string)
-- 	self.text = txt
-- 	if self._isCreated then	setControlText(self.handle, txt) end
-- end

-- function ComboBox:getText(txt: string): string
-- 	if self._isCreated then
-- 		local wstr = getControlText(self.handle)
-- 		self.text = toUTF8(wstr)
-- 		return self.text
-- 	else
-- 		return self.text
-- 	end
-- end

function ComboBox:setForeColor(clr: uinteger)
	self.foreColor = Color.new(clr)
	if (self._drawFlag & 1) ~= 1 then self._drawFlag = self._drawFlag + 1 end
	invalidateNow(self)
end

function ComboBox:setBackColor(clr: uinteger)
	self.backColor = Color.new(clr)
	self._bkBrush = CreateSolidBrush(self.backColor.ref)
	if (self._drawFlag & 2) ~= 2 then self._drawFlag = self._drawFlag + 2 end
	invalidateNow(self)
end

function ComboBox:destroy()
	print("ComboBox destroyed")
	DeleteObject(self._bkBrush)
end

function cmbWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT
	local this = (@*ComboBox)((pointer)(refData))
	switch msg do
	case WM_DESTROY then
	    RemoveWindowSubclass(hw, cmbWndProc, scID)
		this:destroy()

	case WM_LBUTTONDOWN then leftMouseDownHandler(this, msg, wpm, lpm)
	case WM_LBUTTONUP then leftMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_LB_CLICK then leftMouseClickHandler(this)
	case WM_RBUTTONDOWN then rightMouseDownHandler(this, msg, wpm, lpm)
	case WM_RBUTTONUP then rightMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_RB_CLICK then rightMouseClickHandler(this)
	case WM_MOUSEHWHEEL then mouseScrollHandler(this, msg, wpm, lpm)
	case WM_MOUSEMOVE then mouseMoveHandler(this, msg, wpm, lpm)
	case WM_MOUSELEAVE then mouseLeaveHandler(this)
	-- case WM_KEYDOWN then keyDownHandler(this, wpm)
	-- case WM_KEYUP then keyUpHandler(this, wpm)
	-- case WM_CHAR then keyPressHandler(this, wpm)

    -- case MM_CTL_COMMAND then
    --     if hiWord(wpm) == 0 then
    --         this.checked = SendMessageW(hw, BM_GETCHECK, 0, 0) == 1 and true or false
    --         if this.onCheckedChanged ~= nilptr then
    --             local ea = EventArgs {}
    --             this.onCheckedChanged(this, &ea)
    --         end
    --     end

	-- case MM_LABEL_COLOR then
    --     local hdc = (HDC)(wpm)
    --     SetBkColor(hdc, this.backColor.ref)
	-- 	return (LRESULT)(this._bkBrush)

    -- case MM_NOTIFY_REFLECT then
    --     local nmc = (@LPNMCUSTOMDRAW)(lpm)
    --     switch nmc.dwDrawStage do
    --         case CDDS_PREERASE then return CDRF_NOTIFYPOSTERASE
    --         case CDDS_PREPAINT then
    --             local rct = nmc.rc
    --             if not this.rightAlign then  -- Adjusing rect. Otherwise, text will be drawn upon the check area
    --                 rct.left = rct.left + 18
    --             else
    --                 rct.right = rct.right - 18
    --             end
    --             SetTextColor(nmc.hdc, this.foreColor.ref)
    --             DrawTextW(nmc.hdc, toUTF16(this.text), -1, &rct, this._dwTxtFlag)
    --             return CDRF_SKIPDEFAULT
    --     end


	end

	return DefSubclassProc(hw, msg, wpm, lpm)
end


function cmbEditWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT
	local this = (@*ComboBox)((pointer)(refData))
	switch msg do
	case WM_DESTROY then
	    RemoveWindowSubclass(hw, cmbEditWndProc, scID)

	end
	return DefSubclassProc(hw, msg, wpm, lpm)
end