
-- ComboBox module - Created on 10-Mar-2023 08:06 PM

require "nforms.api_messages"
require "nforms.apifuncs"
require "nforms.forms"
require "nforms.common"
-- require 'hashmap'

--Constants
	local CBS_DROPDOWNLIST <comptime> = 0x0003
	local CBS_DROPDOWN <comptime> = 0x0002
	local CB_GETCOMBOBOXINFO <comptime> = 0x0164
	local CB_ADDSTRING <comptime> = 0x0143
	local CB_SETCURSEL <comptime> = 0x014E

	local CBN_SELCHANGE <comptime> = 0x01
	local CBN_SETFOCUS <comptime> = 0x03
	local CBN_KILLFOCUS <comptime> = 0x04
	local CBN_EDITCHANGE <comptime> = 0x05
	local CBN_EDITUPDATE <comptime> = 0x06
	local CBN_DROPDOWN <comptime> = 0x07
	local CBN_CLOSEUP <comptime> = 0x08
	local CBN_SELENDOK <comptime> = 0x09
	local CBN_SELENDCANCEL <comptime> = 0x0A

--End


local cmbNumber = 1
local function cmbWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT <forwarddecl> end
local function cmbEditWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT <forwarddecl> end

global ComboBox = @record
{
	name : string,
	text : string,
	className: LPCWSTR,
	handle : HWND,
	cid: integer,
	width : integer,
	height : integer,
	xpos : integer,
	ypos : integer,
	font: Font,
	parent : *Form,
	backColor: Color,
	foreColor: Color,
    items: vector(string),
    selectedIndex: integer,
    enableInput: boolean,

	--Private fields
	_isCreated: boolean,
	_isTextable: boolean,
	_style: DWORD,
	_exStyle: DWORD,
	_lbDown: boolean,
	_rbDown: boolean,
	_isMouseEntered: boolean,
	_recreateEnabled: boolean,
	_drawFlag: uinteger,
	_bkBrush: HBRUSH,
    _oldHwnd: HWND,
    _dwTxtFlag: UINT,

	--Events
	onMouseDown: MouseEventHandler,
	onMouseUp: MouseEventHandler,
	onClick: EventHandler,
	onRightMouseDown: MouseEventHandler,
	onRightMouseUp: MouseEventHandler,
	onRightClick: EventHandler,
	onMouseScroll: MouseEventHandler,
	onMouseEnter: EventHandler,
	onMouseMove: MouseEventHandler,
	onMouseLeave: EventHandler,
	onCheckedChanged: EventHandler,
	onSelectionChanged: EventHandler,
	onSelectionCommitted: EventHandler,
	onSelectionCancelled: EventHandler,
	onGotFocus: EventHandler,
	onLostFocus: EventHandler,
	onTextChanged: EventHandler,
	onTextUpdated: EventHandler,
	onListOpened: EventHandler,
	onListClosed: EventHandler,
	onKeyDown: KeyEventHandler,
	onKeyUp: KeyEventHandler,
	onKeyPress: KeyEventHandler,
}

-- Public function
function ComboBox.new(frm : *Form, x: integer, y: integer, w: integer, h: integer) : ComboBox
	local this : ComboBox
	this.name = string.format("ComboBox_%d", cmbNumber)
	this.className = toUTF16("ComboBox")
	this.width = w == 0 and 140 or 1
	this.height = h == 0 and 30 or h
	this.xpos = x == 0 and 20 or x
	this.ypos = y == 0 and 20 or y
	this.font = frm.font
	this.parent = frm
	this.cid = frm._cidNumber
	this._style = WS_CHILD | WS_VISIBLE
	this._exStyle = 0 -- WS_EX_CLIENTEDGE
	this.backColor = frm.backColor
	this.foreColor = colorBlack
	this.selectedIndex = -1
    cmbNumber = cmbNumber + 1
	frm._cidNumber = frm._cidNumber + 1
	return this
end

function ComboBox:setCbStyle()
	if self.enableInput then
		self._style = self._style |CBS_DROPDOWN
	else
		self._style = self._style |CBS_DROPDOWNLIST
    end
	if self._bkBrush == nilptr then self._bkBrush = CreateSolidBrush(self.backColor.ref) end
end

function ComboBox:afterCreationJobs()
	self._oldHwnd = self.handle
	setSubClass(self.handle, (pointer)(self), cmbWndProc)

	local cmbInfo: COMBOBOXINFO
	cmbInfo.cbSize = #COMBOBOXINFO
	SendMessageW(self.handle, CB_GETCOMBOBOXINFO, 0, (LPARAM)(&cmbInfo))
	self.parent.comboMap[cmbInfo.hwndList] = self.handle -- Put the handle in parent's dic
	SetWindowSubclass(cmbInfo.hwndItem, &cmbEditWndProc, subClassID, (@DWORD_PTR)(self))
	subClassID = subClassID + 1

	if self.items.size > 0 then
		for _, item in ipairs(self.items) do
			SendMessageW(self.handle, CB_ADDSTRING, 0, (@LPARAM)(toUTF16(item)))
		end
	end
end

-- Public function
function ComboBox:createHandle()
	self:setCbStyle()
	createControl(self)
	if self._isCreated then
		self:afterCreationJobs()
		if self.selectedIndex > -1 then
			SendMessageW(self.handle, CB_SETCURSEL, (@WPARAM)(self.selectedIndex), 0)
		end
        self._recreateEnabled = false
	end
end

function ComboBox:addItem(item: auto)
	self.items:push(tostring(item))
	if self._isCreated then
		SendMessageW(self.handle, CB_ADDSTRING, 0, (@LPARAM)(toUTF16(item)))
	end
end

function ComboBox:addItems(...: varargs)
	## for i=1,select('#', ...) do
		local sitem = tostring(#[select(i, ...)]#)
		self.items:push(sitem)
		if self._isCreated then
			SendMessageW(self.handle, CB_ADDSTRING, 0, (@LPARAM)(toUTF16(sitem)))
		end
	## end
end


function ComboBox:setForeColor(clr: uinteger)
	self.foreColor = Color.new(clr)
	if (self._drawFlag & 1) ~= 1 then self._drawFlag = self._drawFlag + 1 end
	invalidateNow(self)
end

function ComboBox:setBackColor(clr: uinteger)
	self.backColor = Color.new(clr)
	self._bkBrush = CreateSolidBrush(self.backColor.ref)
	if (self._drawFlag & 2) ~= 2 then self._drawFlag = self._drawFlag + 2 end
	invalidateNow(self)
end

local function getMousePoints(): POINT
	local dwValue = GetMessagePos()
	local p : POINT
	p.x = (@LONG)(loWord(dwValue))
	p.y = (@LONG)(hiWord(dwValue))
	return p
end

function ComboBox:isInComboRect(hwnd: HWND): boolean
	local rc : RECT
	GetWindowRect(hwnd, &rc)
	local pt = getMousePoints()
    local bRes = PtInRect(&rc, pt)
	return bRes
end

function ComboBox:mouseLeaveHandler(hwnd: HWND) : LRESULT
	if self.enableInput then
		if self:isInComboRect(hwnd) then
			return 1
		else
			if self.onMouseLeave ~= nilptr then
				local ea : EventArgs = {}
				self.onMouseLeave(self, &ea)
			end
		end
	else
		if self.onMouseLeave ~= nilptr then
			local ea : EventArgs = {}
			self.onMouseLeave(self, &ea)
		end
	end
	return 0
end



function ComboBox:destroy()
	print("ComboBox destroyed")
	DeleteObject(self._bkBrush)
end

function cmbWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT
	local this = (@*ComboBox)((pointer)(refData))
	switch msg do
	case WM_DESTROY then
	    RemoveWindowSubclass(hw, cmbWndProc, scID)
		this:destroy()

	case WM_LBUTTONDOWN then leftMouseDownHandler(this, msg, wpm, lpm)
	case WM_LBUTTONUP then leftMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_LB_CLICK then leftMouseClickHandler(this)
	case WM_RBUTTONDOWN then rightMouseDownHandler(this, msg, wpm, lpm)
	case WM_RBUTTONUP then rightMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_RB_CLICK then rightMouseClickHandler(this)
	case WM_MOUSEHWHEEL then mouseScrollHandler(this, msg, wpm, lpm)
	case WM_MOUSEMOVE then mouseMoveHandler(this, msg, wpm, lpm)
	case WM_MOUSELEAVE then return this:mouseLeaveHandler(hw)
	-- case WM_KEYDOWN then keyDownHandler(this, wpm)
	-- case WM_KEYUP then keyUpHandler(this, wpm)
	-- case WM_CHAR then keyPressHandler(this, wpm)

	case MM_LIST_COLOR then
		if this._drawFlag > 0 then
			local hdc = (HDC)(wpm)
			if (this._drawFlag & 1) == 1 then SetTextColor(hdc, this.foreColor.ref) end
			if (this._drawFlag & 2) == 2 then SetBkColor(hdc, this.backColor.ref) end
		end
		return (LRESULT)(this._bkBrush)

	case MM_CTL_COMMAND then
        local nCode = hiWord(wpm)
		switch nCode do
			case CBN_SELCHANGE then
				if this.onSelectionChanged then
					local ea: EventArgs = {}
					this.onSelectionChanged(this, &ea)
				end
			case CBN_SETFOCUS then
				if this.onGotFocus then
					local ea: EventArgs = {}
					this.onGotFocus(this, &ea)
				end
			case CBN_KILLFOCUS then
				if this.onLostFocus then
					local ea: EventArgs = {}
					this.onLostFocus(this, &ea)
				end
			case CBN_EDITCHANGE then
				if this.onTextChanged then
					local ea: EventArgs = {}
					this.onTextChanged(this, &ea)
				end
			case CBN_EDITUPDATE then
				if this.onTextUpdated then
					local ea: EventArgs = {}
					this.onTextUpdated(this, &ea)
				end
			case CBN_DROPDOWN then
				if this.onListOpened then
					local ea: EventArgs = {}
					this.onListOpened(this, &ea)
				end
			case CBN_CLOSEUP then
				if this.onListClosed then
					local ea: EventArgs = {}
					this.onListClosed(this, &ea)
				end
			case CBN_SELENDOK then
				if this.onSelectionCommitted then
					local ea: EventArgs = {}
					this.onSelectionCommitted(this, &ea)
				end
			case CBN_SELENDCANCEL then
				if this.onSelectionCancelled then
					local ea: EventArgs = {}
					this.onSelectionCancelled(this, &ea)
				end
		end
	end
	return DefSubclassProc(hw, msg, wpm, lpm)
end


function cmbEditWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT
	local this = (@*ComboBox)((pointer)(refData))
	switch msg do
	case WM_DESTROY then
	    RemoveWindowSubclass(hw, cmbEditWndProc, scID)

	case WM_KEYDOWN then keyDownHandler(this, wpm)
	case WM_KEYUP then keyUpHandler(this, wpm)
	case WM_CHAR then keyPressHandler(this, wpm)

	case WM_LBUTTONDOWN then leftMouseDownHandler(this, msg, wpm, lpm)
	case WM_LBUTTONUP then leftMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_LB_CLICK then leftMouseClickHandler(this)
	case WM_RBUTTONDOWN then rightMouseDownHandler(this, msg, wpm, lpm)
	case WM_RBUTTONUP then rightMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_RB_CLICK then rightMouseClickHandler(this)
	case WM_MOUSEHWHEEL then mouseScrollHandler(this, msg, wpm, lpm)
	case WM_MOUSEMOVE then mouseMoveHandler(this, msg, wpm, lpm)

	case MM_EDIT_COLOR then
		if this._drawFlag > 0 then
			local hdc = (@HDC)(wpm)
			SetBkMode(hdc, 1)
			if (this._drawFlag & 1) == 1 then SetTextColor(hdc, this.foreColor.ref) end
			if (this._drawFlag & 2) == 2 then SetBkColor(hdc, this.backColor.ref) end
		end
		return (@LRESULT)(this._bkBrush)
	end
	return DefSubclassProc(hw, msg, wpm, lpm)
end