
-- GroupBox module - Created on 16-Mar-2023 11:54 PM
--[[
	For properties & Events, see the declaration of GroupBox record in controls.nelu.
	Private fields are starting with underscore.

	Important functions of GroupBox record
	---------------------------------------
	GroupBox.new - Constructor
	createHandle - Create handle of GroupBox
	addContextMenu
	setText
	getText
	setForeColor
	setBackColor
	
]]

require "nforms.api_messages"
require "nforms.apifuncs"
require "nforms.controls"
require "nforms.common"

--Constants
	local BS_GROUPBOX <comptime> = 0x00000007
	local BS_NOTIFY <comptime> = 0x00004000
	local BS_TOP <comptime> = 0x00000400
--End

local gbStyle <comptime> = WS_CHILD|WS_VISIBLE|BS_GROUPBOX|BS_NOTIFY|BS_TOP|WS_OVERLAPPED|WS_CLIPCHILDREN|WS_CLIPSIBLINGS
local gbExStyle <comptime> = WS_EX_RIGHTSCROLLBAR| WS_EX_CONTROLPARENT
local gbNumber = 1
local gbClass = toUTF16("Button")
local function gbWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT <forwarddecl> end



function GroupBox:createHandle() <forwarddecl> end
global GroupBoxParams = @record
{
	parent: *Form, text: string, xpos: integer, ypos: integer,
	width: integer, height: integer
}

-- Public function
function GroupBox.new(params: GroupBoxParams) : *GroupBox
	local this : *GroupBox = default_allocator:new(@GroupBox)
	this.name = string.format("GroupBox_%d", gbNumber)
	this.className = gbClass
	this.text = params.text == "" and this.name or params.text
	this.width = params.width == 0 and 180 or params.width
	this.height = params.height == 0 and 150 or params.height
	this.xpos = params.xpos == 0 and 20 or params.xpos
	this.ypos = params.ypos == 0 and 20 or params.ypos
	this.font = params.parent.font
	this.parent = params.parent
	this.cid = params.parent._cidNumber
	this._style = gbStyle
	this._exStyle = gbExStyle
	this._isTextable = true
	this.backColor = params.parent.backColor
	this.foreColor = colorBlack
    gbNumber = gbNumber + 1
	params.parent._cidNumber = params.parent._cidNumber + 1
	if params.parent.createChilds then this:createHandle() end
	return this
end

function GroupBox:addContextMenu(items: span(string))
	self.contextMenu = ContextMenu.new(self)
	self.contextMenu:addItems(items)
end

--Private function
function GroupBox:setBrushAndPen()
    self._bkBrush = CreateSolidBrush(self.backColor.ref)
    self._pen = CreatePen(PS_SOLID, 2, self.backColor.ref)
end

--Private function
function GroupBox:getTextBounds()
    local hdc: HDC = GetDC(self.handle)
    defer ReleaseDC(self.handle, hdc) end
    local ss : SIZE
    SelectObject(hdc, self.font.handle)
    GetTextExtentPoint32W(hdc, toUTF16(self.text), #self.text, &ss)
    self._txtWidth = ss.cx + 8
end

-- Public function
function GroupBox:createHandle()
	self:setBrushAndPen()
	createControl(self)
	if self._isCreated then
        setSubClass(self.handle, (pointer)(self), gbWndProc)
        self:getTextBounds()
	end
end

function GroupBox:setText(txt: string)
	self.text = txt
	if self._isCreated then	setControlText(self.handle, txt) end
end

function GroupBox:getText(txt: string): string
	if self._isCreated then
		local wstr = getControlText(self.handle)
		self.text = toUTF8(wstr)
		return self.text
	else
		return self.text
	end
end

function GroupBox:setForeColor(clr: uinteger)
	self.foreColor = Color.new(clr)
	if (self._drawFlag & 1) ~= 1 then self._drawFlag = self._drawFlag + 1 end
	invalidateNow(self)
end

function GroupBox:setBackColor(clr: uinteger)
	self.backColor = Color.new(clr)
	self._bkBrush = CreateSolidBrush(self.backColor.ref)
	if (self._drawFlag & 2) ~= 2 then self._drawFlag = self._drawFlag + 2 end
	invalidateNow(self)
end

--Private function
function GroupBox:drawText()
    local hdc = GetDC(self.handle)
    defer ReleaseDC(self.handle, hdc) end
    local yp = 11
    SetBkMode(hdc, 1)

    SelectObject(hdc, self._pen)
    MoveToEx(hdc, 10, yp, nilptr)
    LineTo(hdc, self._txtWidth, yp)

    SelectObject(hdc, self.font.handle)
    SetTextColor(hdc, self.foreColor.ref)
    TextOutW(hdc, 10, 0, toUTF16(self.text), #self.text)
end

--Private function
function GroupBox:destroy()
	-- print("GroupBox destroyed")
	DeleteObject(self._bkBrush)
	DeleteObject(self._pen)
	self = nilptr
end

function gbWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT
	local this = (@*GroupBox)((pointer)(refData))
	switch msg do
	case WM_DESTROY then
	    RemoveWindowSubclass(hw, gbWndProc, scID)
		this:destroy()

	case WM_LBUTTONDOWN then leftMouseDownHandler(this, msg, wpm, lpm)
	case WM_LBUTTONUP then leftMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_LB_CLICK then leftMouseClickHandler(this)
	case WM_RBUTTONDOWN then rightMouseDownHandler(this, msg, wpm, lpm)
	case WM_RBUTTONUP then rightMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_RB_CLICK then rightMouseClickHandler(this)
	case WM_MOUSEHWHEEL then mouseScrollHandler(this, msg, wpm, lpm)
	case WM_MOUSEMOVE then mouseMoveHandler(this, msg, wpm, lpm)
	case WM_MOUSELEAVE then mouseLeaveHandler(this)
	-- case WM_KEYDOWN then keyDownHandler(this, wpm)
	-- case WM_KEYUP then keyUpHandler(this, wpm)
	-- case WM_CHAR then keyPressHandler(this, wpm)
	case WM_CONTEXTMENU then
		if this.contextMenu ~= nilptr then this.contextMenu:show(lpm) end
		
    case WM_ERASEBKGND then
        if this._drawFlag > 0 then
            local hdc = (@HDC)(wpm)
            local rc : RECT
            GetClientRect(hw, &rc)
            FillRect(hdc, &rc, this._bkBrush)
            return 1
        end

    case WM_PAINT then
        local ret = DefSubclassProc(hw, msg, wpm, lpm)
        this:drawText();
        return ret

    case WM_GETTEXTLENGTH then return 0
	end
	return DefSubclassProc(hw, msg, wpm, lpm)
end
