
-- progressbar module - Created on 09-Apr-2023 07:55 PM

require "nforms.api_messages"
require "nforms.apifuncs"
require "nforms.controls"
require "nforms.common"

--Constants
	local PBS_SMOOTH <comptime> = 0x01
	local PBS_VERTICAL <comptime> = 0x04
	local PBS_MARQUEE <comptime> = 0x08
	local PBST_NORMAL <comptime> = 0x0001
	local PBST_ERROR <comptime> = 0x0002
	local PBST_PAUSED <comptime> = 0x0003
	local PBM_SETPOS <comptime> = (WM_USER+2)
	local PBM_SETSTEP <comptime> = (WM_USER+4)
	local PBM_STEPIT <comptime> = (WM_USER+5)
	local PBM_SETRANGE32 <comptime> = (WM_USER+6)
	local PBM_GETPOS <comptime> = (WM_USER+8)
	local PBM_SETMARQUEE <comptime> = (WM_USER+10)
	local PBM_SETSTATE  <comptime> = (WM_USER+16)
--End

local pbStyle <comptime> =  WS_VISIBLE | WS_CHILD 
local lbExStyle <comptime> = 0 --WS_EX_LEFT|WS_EX_LTRREADING|WS_EX_CLIENTEDGE|WS_EX_NOPARENTNOTIFY
local pbNumber = 1
local pbClass = toUTF16("msctls_progress32")
local function pbWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT <forwarddecl> end




function ProgressBar:createHandle() <forwarddecl> end
global ProgressBarParams = @record
{
	parent: *Form, xpos: integer, ypos: integer,
	width: integer, height: integer,  create: boolean, perc: boolean
}

-- Public function
function ProgressBar.new(params: ProgressBarParams) : *ProgressBar
	local this : *ProgressBar = default_allocator:new(@ProgressBar)
	this.name = string.format("ProgressBar_%d", pbNumber)
	this.className = pbClass
	this.width = params.width == 0 and 230 or params.width
	this.height = params.height == 0 and 25 or params.height
	this.xpos = params.xpos == 0 and 20 or params.xpos
	this.ypos = params.ypos == 0 and 20 or params.ypos
	this.font = params.parent.font
	this.parent = params.parent
	this._style = pbStyle
	this._exStyle = 0
	this._isTextable = false
	this.backColor = params.parent.backColor
	this.foreColor = colorBlack
    this.minValue = 0
    this.maxValue = 100
    this.step = 1
    this.barState = ProgressBarState.normal
    this.barStyle = ProgressBarStyle.block
    this.marqueeSpeed = 30
	this.cid = params.parent._cidNumber
    pbNumber = pbNumber + 1
    this.showPercentage = params.perc
	params.parent._cidNumber = params.parent._cidNumber + 1
	if params.create then this:createHandle() end
	return this
end

--Private function
function ProgressBar:setPBStyles()
	if self.barStyle == ProgressBarStyle.marquee then self._style = self._style | PBS_MARQUEE end
    if self.vertical then self._style = self._style | PBS_VERTICAL end
end


-- Public function
function ProgressBar:createHandle()
	self:setPBStyles()
	createControl(self)
	if self._isCreated then
		setSubClass(self.handle, (pointer)(self), pbWndProc)
		SendMessageW(self.handle, PBM_SETRANGE32, (@WPARAM)(self.minValue), (@LPARAM)(self.maxValue))
        SendMessageW(self.handle, PBM_SETSTEP, (@WPARAM)(self.step), 0)
	end
end

function ProgressBar:increment()
    if self._isCreated then
        self.value = self.value == self.maxValue and self.step or self.value + self.step
        SendMessageW(self.handle, PBM_STEPIT, 0, 0)
    end
end

function ProgressBar:startMarquee()
    if self._isCreated and self.barStyle == ProgressBarStyle.marquee then
		SendMessageW(self.handle, PBM_SETMARQUEE, (@WPARAM)(1), (@LPARAM)(self.marqueeSpeed))
	end
end

function ProgressBar:stopMarquee()
    if self._isCreated and self.barStyle == ProgressBarStyle.marquee then
		SendMessageW(self.handle, PBM_SETMARQUEE, 0, (@LPARAM)(self.marqueeSpeed))
	end
end

function ProgressBar:setValue(ivalue: integer)
    if ivalue >= self.minValue and ivalue <= self.maxValue then
        self.value = ivalue
        if self._isCreated then SendMessageW(self.handle, PBM_SETPOS, (@WPARAM)(ivalue), 0) end
    else
        print("value is not in between minValue & maxValue")
    end
end

function ProgressBar:setStyle(value: ProgressBarStyle)
    if self._isCreated and self.barStyle ~= value then
        self.value = 0
        if value == ProgressBarStyle.block then
            self._style = self._style ~ PBS_MARQUEE
            self._style = self._style | PBS_SMOOTH
        else
            self._style = self._style ~ PBS_SMOOTH
            self._style = self._style | PBS_MARQUEE
        end
    end
    SetWindowLongPtrW(self.handle, GWL_STYLE, (@LONG_PTR)(self._style))
    if value == ProgressBarStyle.marquee then 
    	SendMessageW(self.handle, PBM_SETMARQUEE, (@WPARAM)(1), (@LPARAM)(self.marqueeSpeed))
    end	
    self.barStyle = value
end	

function ProgressBar:setStep(value: integer)
    if value >= self.minValue and value <= self.maxValue then
        self.step = value
        if self._isCreated then 
        	SendMessageW(self.handle, PBM_SETSTEP, (@WPARAM)(self.step), 0)
        end
    else
        print("value is not in between minValue & maxValue")
    end
end

function ProgressBar:setState(value: ProgressBarState)
    self.barState = value
    if self._isCreated then 
    	SendMessageW(self.handle, PBM_SETSTATE, (@WPARAM)((@integer)((value))), 0)
    end
end

function ProgressBar:addContextMenu(items: span(string))
	self.contextMenu = ContextMenu.new(self)
	self.contextMenu:addItems(items)
end

--Private function
function ProgressBar:destroy()
	DeleteObject(self._bkBrush)
	self = nilptr
end

function pbWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT
	local this = (@*ProgressBar)((pointer)(refData))
	switch msg do
	case WM_DESTROY then
	    RemoveWindowSubclass(hw, pbWndProc, scID)
		this:destroy()

	case WM_LBUTTONDOWN then leftMouseDownHandler(this, msg, wpm, lpm)
	case WM_LBUTTONUP then leftMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_LB_CLICK then leftMouseClickHandler(this)
	case WM_RBUTTONDOWN then rightMouseDownHandler(this, msg, wpm, lpm)
	case WM_RBUTTONUP then rightMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_RB_CLICK then rightMouseClickHandler(this)
	case WM_MOUSEHWHEEL then mouseScrollHandler(this, msg, wpm, lpm)
	case WM_MOUSEMOVE then mouseMoveHandler(this, msg, wpm, lpm)
	case WM_MOUSELEAVE then mouseLeaveHandler(this)
	case WM_CONTEXTMENU then
		if this.contextMenu ~= nilptr then this.contextMenu:show(lpm) end

	case WM_PAINT then
        if this.showPercentage and this.barStyle == ProgressBarStyle.block then
            DefSubclassProc(hw, msg, wpm, lpm)
            local ss: SIZE
            local vtext = string.format("%d%%", this.value)
            local wtext = toUTF16(vtext)
            local hdc: HDC = GetDC(hw)
            defer ReleaseDC(hw, hdc) end
            SelectObject(hdc, this.font.handle)
            GetTextExtentPoint32W(hdc, wtext, #vtext, &ss)
            local x = (@integer)((this.width - ss.cx) / 2)
            local y = (@integer)((this.height - ss.cy) / 2)
            SetBkMode(hdc, 1)
            SetTextColor(hdc, this.foreColor.ref)
            TextOutW(hdc, x, y, wtext, #vtext)            
            return 0
        else
            return DefSubclassProc(hw, msg, wpm, lpm)
        end
	end
	return DefSubclassProc(hw, msg, wpm, lpm)
end
