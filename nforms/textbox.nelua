-- Textbox module - Created on 05-Mar-2023 07:18 AM

require "nforms.api_messages"
require "nforms.apifuncs"
require "nforms.controls"
require "nforms.common"

--Constants
	local ECM_FIRST <comptime> = 0x1500
	local ES_LEFT <comptime> = 0
	local ES_AUTOHSCROLL <comptime> = 128
	local ES_MULTILINE <comptime> = 4
	local ES_WANTRETURN <comptime> = 4096
	local ES_NOHIDESEL <comptime> = 256
	local ES_READONLY <comptime> = 0x800
	local ES_LOWERCASE <comptime> = 16
	local ES_UPPERCASE <comptime> = 8

	local ES_NUMBER <comptime> = 0x2000
	local ES_PASSWORD <comptime> = 32
	local ES_CENTER <comptime> = 1
	local ES_RIGHT <comptime> = 2
	local EM_SETCUEBANNER <comptime> = ECM_FIRST + 1
--End

local tbStyle <comptime> =  WS_CHILD|WS_VISIBLE|ES_LEFT|WS_TABSTOP|ES_AUTOHSCROLL|WS_MAXIMIZEBOX|WS_OVERLAPPED
local tbExStyle <comptime> = WS_EX_LEFT|WS_EX_LTRREADING|WS_EX_CLIENTEDGE|WS_EX_NOPARENTNOTIFY
local tbNumber = 1
local tbClass = toUTF16("Edit")

local function tbWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT <forwarddecl> end



function TextBox:createHandle() <forwarddecl> end
global TextBoxParams = @record
{
	parent: *Form, text: string, xpos: integer, ypos: integer,
	width: integer, height: integer
}

-- Public function
function TextBox.new(params: TextBoxParams) : *TextBox
	local this : *TextBox = default_allocator:new(@TextBox)
	this.name = string.format("TextBox_%d", tbNumber)
	this.className = tbClass
	this.text = params.text == "" and this.name or params.text
	this.width = params.width == 0 and 140 or params.width
	this.height = params.height == 0 and 27 or params.height
	this.xpos = params.xpos == 0 and 20 or params.xpos
	this.ypos = params.ypos == 0 and 20 or params.ypos
	this.font = params.parent.font
	this.parent = params.parent
	this.cid = params.parent._cidNumber
	this._style = tbStyle
	this._exStyle = tbExStyle
	this._isTextable = true
	this.backColor = colorWhite
	this.foreColor = colorBlack
	tbNumber = tbNumber + 1
	params.parent._cidNumber = params.parent._cidNumber + 1
	if params.parent.createChilds then this:createHandle() end
	return this
end

--Private function
function TextBox:setTbStyles()
	if self.multiLine then self._style = self._style | ES_MULTILINE | ES_WANTRETURN end
    if not self.hideSelection then self._style = self._style| ES_NOHIDESEL end
    if self.readOnly then self._style = self._style| ES_READONLY end

    if self.textCase == TextCase.LowerCase then
		self._style = self._style | ES_LOWERCASE
    elseif self.textCase == TextCase.UpperCase then
		self._style = self._style|ES_UPPERCASE
	end
    if self.textType == TextType.NumberOnly then
		self._style = self._style|ES_NUMBER
    elseif self.textType == TextType.PasswordChar then
		self._style = self._style|ES_PASSWORD
	end
    if self.alignment == TextAlign.Center then
		self._style = self._style|ES_CENTER
    elseif self.alignment == TextAlign.Right then
		self._style = self._style|ES_RIGHT
	end
    self._bkBrush = CreateSolidBrush(self.backColor.ref)
end

-- Public function
function TextBox:createHandle()
	self:setTbStyles()
	createControl(self)
	if self._isCreated then
		setSubClass(self.handle, (pointer)(self), tbWndProc)
		if #self.cueBanner > 0 then sendMsg(self, EM_SETCUEBANNER, 1, toUTF16(self.cueBanner)) end
	end
end

function TextBox:setText(txt: string)
	self.text = txt
	if self._isCreated then	setControlText(self.handle, txt) end
end

function TextBox:getText(txt: string): string
	if self._isCreated then
		local wstr = getControlText(self.handle)
		self.text = toUTF8(wstr)
		return self.text
	else
		return self.text
	end
end

function TextBox:setForeColor(clr: uinteger)
	self.foreColor = Color.new(clr)
	if (self._drawFlag & 1) ~= 1 then self._drawFlag = self._drawFlag + 1 end
	invalidateNow(self)
end

function TextBox:setBackColor(clr: uinteger)
	self.backColor = Color.new(clr)
	self._bkBrush = CreateSolidBrush(self.backColor.ref)
	if (self._drawFlag & 2) ~= 2 then self._drawFlag = self._drawFlag + 2 end
	invalidateNow(self)
end

function TextBox:addContextMenu(items: span(string))
	self.contextMenu = ContextMenu.new(self)
	self.contextMenu:addItems(items)
end

--Private function
function TextBox:destroy()
	DeleteObject(self._bkBrush)
	self = nilptr
end

function tbWndProc(hw: HWND, msg: UINT, wpm: WPARAM, lpm: LPARAM, scID: UINT_PTR, refData: DWORD_PTR): LRESULT
	local this = (@*TextBox)((pointer)(refData))
	switch msg do
	case WM_DESTROY then
	    RemoveWindowSubclass(hw, tbWndProc, scID)
		this:destroy()

	case WM_LBUTTONDOWN then leftMouseDownHandler(this, msg, wpm, lpm)
	case WM_LBUTTONUP then leftMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_LB_CLICK then leftMouseClickHandler(this)
	case WM_RBUTTONDOWN then rightMouseDownHandler(this, msg, wpm, lpm)
	case WM_RBUTTONUP then rightMouseUpHandler(this, msg, wpm, lpm)
	case MM_MOUSE_RB_CLICK then rightMouseClickHandler(this)
	case WM_MOUSEHWHEEL then mouseScrollHandler(this, msg, wpm, lpm)
	case WM_MOUSEMOVE then mouseMoveHandler(this, msg, wpm, lpm)
	case WM_MOUSELEAVE then mouseLeaveHandler(this)
	case WM_KEYDOWN then keyDownHandler(this, wpm)
	case WM_KEYUP then keyUpHandler(this, wpm)
	case WM_CHAR then keyPressHandler(this, wpm)
	case WM_CONTEXTMENU then
		if this.contextMenu ~= nilptr then this.contextMenu:show(lpm) end

	case MM_CTL_COMMAND then
		if hiWord(wpm) == 0x0300 then
			if this.onTextChanged ~= nilptr then 
				local ea : EventArgs = {}
				this.onTextChanged(this, &ea)
			end
		end

	case MM_EDIT_COLOR then
		if this._drawFlag > 0 then
			local hdc = (HDC)(wpm)
			if (this._drawFlag & 1) == 1 then SetTextColor(hdc, this.foreColor.ref) end
			if (this._drawFlag & 2) == 2 then SetBkColor(hdc, this.backColor.ref) end
		end
		return (LRESULT)(this._bkBrush)
	end
	return DefSubclassProc(hw, msg, wpm, lpm)
end
