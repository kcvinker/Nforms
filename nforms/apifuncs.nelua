require "string"


##[[
cinclude "<windows.h>"
cinclude "<wingdi.h>"
cinclude "<commctrl.h>"

]]

## linklib "Gdi32"
## linklib "Comctl32"
## linklib "comdlg32"
## linklib "ole32"
## linklib "shell32"

-- Windows Data Types
    global HANDLE: type = @pointer
    global PHANDLE: type = @*HANDLE
    -- global HWND__: type = @pointer  ---  <cimport,nodecl,ctypedef> = @record{ unused: cint }
    global HWND: type = @HANDLE
    global HBITMAP: type = @HANDLE
    global HFONT : type = @HANDLE
    global HDC : type = @HANDLE
    global HGDIOBJ : type = @HANDLE
    global HINSTANCE : type = @HANDLE
    global HICON : type = @HANDLE
    global HCURSOR : type = @HANDLE
    global HBRUSH : type = @HANDLE
    global HPEN : type = @HANDLE
    global HMENU : type = @HANDLE
    global HMODULE : type = @HANDLE
    global HRGN : type = @HANDLE
    global HTREEITEM : type = @HANDLE
    global HRESULT : type = @clong


    global INT : type = @cint
    global UINT : type = @cuint
    global LONG : type = @clong
    global INT_PTR : type = @isize
    global LONG_PTR : type = @isize
    global LRESULT : type = @clonglong
    global UINT_PTR: type = @usize -- @culonglong
    global ULONG_PTR: type = @usize --@culonglong
    global DWORD : type = @culong
    global DWORD_PTR : type = @ULONG_PTR
    global COLORREF : type = @DWORD
    global WORD: type = @cushort
    global BOOL: type = @cint
    global WPARAM : type = @UINT_PTR
    global LPARAM : type = @LONG_PTR
    global LPCWSTR : type = @*cwchar_t
    global LPWSTR: type = @*cwchar_t
    global WCHAR : type = @cwchar_t
    global PWCHAR: type = @*cwchar_t
    global LPBOOL: type = @*cint
    global PVOID: type = @pointer
    global LPVOID: type = @pointer
    global PUINT: type = @*cuint
    global LPCCH: type = @cstring
    global LPSTR: type = @cstring
    global LPCWCH: type = @*cwchar_t
    global wstring = @record{ data: span(cwchar_t) }
    global WNDPROC: type <cimport,nodecl> = @function(HWND, UINT, WPARAM, LPARAM): LRESULT
    global SUBCLASSPROC: type <cimport,nodecl> = @function(HWND, UINT, WPARAM, LPARAM, UINT_PTR, DWORD_PTR): LRESULT
    global TIMERPROC: type <cimport,nodecl> = @function(HWND, UINT, UINT_PTR, DWORD)
--End of Types

function wstring:__len() : number
    return #self.data 
end



global SW_SHOW : DWORD <comptime> = 5
global RDW_INVALIDATE : UINT <comptime> = 1
global RDW_INTERNALPAINT : UINT <comptime> = 2
global RDW_UPDATENOW : UINT <comptime> = 256

--Structs
    global POINT : type <cimport,nodecl> = @record {
        x : LONG,
        y : LONG,
    }
    global LPPOINT = @*POINT

    global MSG : type <cimport,nodecl> = @record {
        hwnd: HWND,
        message: UINT,
        wparam: WPARAM,
        lparam: LPARAM,
        time: DWORD,
        pt: POINT,
        lPrivate : DWORD
    }
    global LPMSG : type = @*MSG

    global WNDCLASSEXW : type <cimport,nodecl> = @record {
        cbSize : UINT,
        style : DWORD,
        lpfnWndProc : WNDPROC,
        cbClsExtra : INT,
        cbWndExtra : INT,
        hInstance : HINSTANCE,
        hIcon : HICON,
        hCursor : HCURSOR,
        hbrBackground : HBRUSH,
        lpszMenuName : LPCWSTR,
        lpszClassName : LPCWSTR,
        hIconSm : HICON
    }
    global LPWNDCLASSEXW = @*WNDCLASSEXW

    global RECT : type <cimport,nodecl> = @record { left: LONG, top: LONG, right: LONG, bottom: LONG }
    global LPRECT = @*RECT

    global INITCOMMONCONTROLSEX : type <cimport,nodecl> = @record {
        dwSize : DWORD,
        dwICC : DWORD
    }
    global LPINITCOMMONCONTROLSEX = @*INITCOMMONCONTROLSEX

    global NMHDR : type <cimport,nodecl> = @record {
        hwndFrom : HWND,
        idFrom : usize,
        code : usize,
    }
    global LPNMHDR = @*NMHDR

    global NMCUSTOMDRAW : type <cimport,nodecl> = @record {
        hdr : NMHDR,
        dwDrawStage : DWORD,
        hdc : HDC,
        rc : RECT,
        dwItemSpec : DWORD_PTR,
        uItemState : usize,
        lItemParam : LPARAM,
    }
    global LPNMCUSTOMDRAW = @*NMCUSTOMDRAW

    global TRACKMOUSEEVENT : type <cimport,nodecl> = @record {
        cbSize : DWORD,
        dwFlags : DWORD,
        hwndTrack : HWND,
        dwHoverTime : DWORD,
    }
    global LPTRACKMOUSEEVENT = @*TRACKMOUSEEVENT

    global SIZE : type <cimport,nodecl> = @record {
        cx : LONG,
        cy : LONG,
    }
    global LPSIZE = @*SIZE

    global COMBOBOXINFO : type <cimport,nodecl> = @record {
        cbSize: DWORD,
        rcItem: RECT,
        rcButton: RECT,
        stateButton: DWORD,
        hwndCombo: HWND,
        hwndItem: HWND,
        hwndList: HWND,
    }
    global LPCOMBOBOXINFO = @*COMBOBOXINFO

    global SYSTEMTIME : type <cimport,nodecl> = @record {
        wYear : WORD,
        wMonth : WORD,
        wDayOfWeek : WORD,
        wDay : WORD,
        wHour : WORD,
        wMinute : WORD,
        wSecond : WORD,
        wMilliseconds : WORD,
    }
    global LPSYSTEMTIME = @*SYSTEMTIME

    global NMDATETIMESTRINGW : type <cimport,nodecl> = @record {
        nmhdr : NMHDR,
        pszUserString : LPCWSTR,
        st : SYSTEMTIME,
        dwFlags : DWORD,
    }
    global LPNMDATETIMESTRINGW = @*NMDATETIMESTRINGW

    global NMDATETIMEWMKEYDOWNW : type <cimport,nodecl> = @record {
        nmhdr : NMHDR,
        nVirtKey : cint,
        pszFormat : LPCWSTR,
        st : SYSTEMTIME,
    }
    global LPNMDATETIMEWMKEYDOWNW = @*NMDATETIMEWMKEYDOWNW

    global NMDATETIMEFORMATW : type <cimport,nodecl> = @record {
        nmhdr : NMHDR,
        pszFormat : LPCWSTR,
        st : SYSTEMTIME,
        nVirtKey : cint,
        pszDisplay: LPCWSTR,
        szDisplay: [64]WCHAR,
    }
    global LPNMDATETIMEFORMATW = @*NMDATETIMEFORMATW

    global NMDATETIMECHANGE : type <cimport,nodecl> = @record {
        nmhdr : NMHDR,
        dwFlags : DWORD,
        st : SYSTEMTIME,
    }
    global LPNMDATETIMECHANGE = @*NMDATETIMECHANGE

    global NMUPDOWN : type <cimport,nodecl> = @record {
        hdr : NMHDR,
        iPos : cint,
        iDelta : cint,
    }
    global LPNMUPDOWN = @*NMUPDOWN

    global TVITEMEXW : type <cimport,nodecl> = @record {
        mask: UINT,
        hItem: HTREEITEM,
        state: UINT,
        stateMask: UINT,
        pszText: LPWSTR,
        cchTextMax: cint,
        iImage: cint,
        iSelectedImage: cint,
        cChildren: cint,
        lParam: LPARAM,
        iIntegral: cint,
        uStateEx: UINT,
        hwnd: HWND,
        iExpandedImage: cint ,
        iReserved: cint,
    }
    global LPTVITEMEXW = @*TVITEMEXW

    global TVINSERTSTRUCTW : type <cimport,nodecl> = @record {
        hParent: HTREEITEM,
        hInsertAfter: HTREEITEM,
        itemex: TVITEMEXW,
    }
    global LPTVINSERTSTRUCTW = @*TVINSERTSTRUCTW

    global LVCOLUMNW : type <cimport,nodecl> = @record {
        mask: cuint,
        fmt: cint,
        cx: cint,
        pszText: LPWSTR,
        cchTextMax: cint,
        iSubItem: cint,
        iImage: cint,
        iOrder: cint,
        cxMin: cint,
        cxDefault: cint,
        cxIdeal: cint,
    }
    global LPLVCOLUMNW = @*LVCOLUMNW

    global LVITEMW : type <cimport,nodecl> = @record {
        mask: UINT,
        iItem: cint,
        iSubItem: cint,
        state: UINT,
        stateMask: UINT,
        pszText: LPWSTR,
        cchTextMax: cint,
        iImage: cint,
        lParam: LPARAM,
        iIndent: cint,
        iGroupId: cint,
        cColumns: UINT,
        puColumns: *UINT,
        piColFmt: *cint,
        iGroup: cint,
    }
    global LPLVITEMW = @*LVITEMW

    global HDHITTESTINFO : type <cimport,nodecl> = @record {
        pt: POINT,
        flags: UINT,
        iItem: cint,
    }
    global LPHDHITTESTINFO = @*HDHITTESTINFO

    global WINDOWPOS : type <cimport,nodecl> = @record {
        hwnd : HWND,
        hwndInsertAfter : HWND,
        x : int32,
        y : int32,
        cx : int32,
        cy : int32,
        flags : UINT
    }
    global LPWINDOWPOS = @*WINDOWPOS

    global HDLAYOUT : type <cimport,nodecl> = @record {
        prc: *RECT,
        pwpos: *WINDOWPOS,
    }
    global LPHDLAYOUT = @*HDLAYOUT

    global NMLVCUSTOMDRAW : type <cimport,nodecl> = @record {
        nmcd: NMCUSTOMDRAW,
        clrText: COLORREF,
        clrTextBk: COLORREF,
        iSubItem: cint,
        dwItemType: DWORD,
        clrFace: COLORREF,
        iIconEffect: cint,
        iIconPhase: cint,
        iPartId: cint,
        iStateId: cint,
        rcText: RECT,
        uAlign: UINT,
    }
    global LPNMLVCUSTOMDRAW = @*NMLVCUSTOMDRAW

    global NMLISTVIEW : type <cimport,nodecl> = @record {
        hdr: NMHDR,
        iItem: cint,
        iSubItem: cint,
        uNewState: UINT,
        uOldState: UINT,
        uChanged: UINT,
        ptAction: POINT,
        lParam: LPARAM,
    }
    global LPNMLISTVIEW = @*NMLISTVIEW

    global NMITEMACTIVATE : type <cimport,nodecl> = @record {
        hdr: NMHDR,
        iItem: cint,
        iSubItem: cint,
        uNewState: UINT,
        uOldState: UINT,
        uChanged: UINT,
        ptAction: POINT,
        lParam: LPARAM,
        uKeyFlags: UINT,
    }
    global LPNMITEMACTIVATE = @*NMITEMACTIVATE

    global OFNHOOKPROC: type <cimport,nodecl> = @function(HWND, UINT, WPARAM, LPARAM): UINT_PTR
    global BROWSECBPROC: type <cimport,nodecl> = @function(HWND, UINT, WPARAM, LPARAM): cint

    global OPENFILENAMEW : type <cimport,nodecl> = @record {
        lStructSize: DWORD,
        hwndOwner: HWND,
        hInstance: HINSTANCE,
        lpstrFilter: LPCWSTR,
        lpstrCustomFilter: LPWSTR,
        nMaxCustFilter: DWORD,
        nFilterIndex: DWORD,
        lpstrFile: LPWSTR,
        nMaxFile: DWORD,
        lpstrFileTitle: LPWSTR,
        nMaxFileTitle: DWORD,
        lpstrInitialDir: LPCWSTR,
        lpstrTitle: LPCWSTR,
        Flags: DWORD,
        nFileOffset: WORD,
        nFileExtension: WORD,
        lpstrDefExt: LPCWSTR,
        lCustData: LPARAM,
        lpfnHook: OFNHOOKPROC,
        lpTemplateName: LPCWSTR,
        pvReserved: pointer,
        dwReserved: DWORD,
        FlagsEx: DWORD,
    }
    global LPOPENFILENAMEW = @*OPENFILENAMEW

    global SHITEMID : type <cimport,nodecl> = @record {
        cb: uint16,
        abID: [1]uint8
    }
    global LPSHITEMID = @*SHITEMID

    global ITEMIDLIST : type <cimport,nodecl> = @record { mkid: SHITEMID }

    global ITEMIDLIST_RELATIVE = ITEMIDLIST
    global ITEMID_CHILD = ITEMIDLIST
    global ITEMIDLIST_ABSOLUTE = ITEMIDLIST
    global LPITEMIDLIST = @*ITEMIDLIST
    global LPCITEMIDLIST = @*ITEMIDLIST
    global PIDLIST_ABSOLUTE = @*ITEMIDLIST_ABSOLUTE
    global PCIDLIST_ABSOLUTE = @*ITEMIDLIST_ABSOLUTE

    global BROWSEINFOW : type <cimport,nodecl> = @record {
        hwndOwner: HWND,
        pidlRoot: PCIDLIST_ABSOLUTE,
        pszDisplayName: LPWSTR,
        lpszTitle: LPCWSTR,
        ulFlags: UINT,
        lpfn: BROWSECBPROC,
        lParam: LPARAM,
        iImage: cint
    }
    global LPBROWSEINFOW = @*BROWSEINFOW

    global MENUITEMINFO = @record
    {
        cbSize : UINT,
        fMask : UINT,
        fType : UINT,
        fState : UINT,
        wID : UINT,
        hSubMenu : HMENU,
        hbmpChecked : HBITMAP,
        hbmpUnchecked : HBITMAP,
        dwItemData : ULONG_PTR,
        dwTypeData : LPWSTR,
        cch : UINT,
        hbmpItem : HBITMAP,
    }
    global LPCMENUITEMINFO = @*MENUITEMINFO

    global MEASUREITEMSTRUCT = @record
    {
        CtlType: UINT,
        CtlID: UINT,
        itemID: UINT,
        itemWidth: UINT,
        itemHeight: UINT,
        itemData: ULONG_PTR,
    }
    global LPMEASUREITEMSTRUCT = @*MEASUREITEMSTRUCT

    global DRAWITEMSTRUCT = @record {
        ctlType : UINT,
        ctlID: UINT,
        itemID: UINT,
        itemAction: UINT,
        itemState : UINT,
        hwndItem : HWND,
        hDC : HDC,
        rcItem : RECT,
        itemData : DWORD_PTR,
    }
    global LPDRAWITEMSTRUCT = @*DRAWITEMSTRUCT

    global NOTIFYICONDATA  = @record {
        cbSize: DWORD,
        hWnd: HWND,
        uID: UINT,
        uFlags: UINT,
        uCallbackMessage: UINT,
        hIcon: HICON,
        szTip: [128]WCHAR,
        dwState: DWORD,
        dwStateMask: DWORD,
        balloonText: [256]WCHAR,
        dummy: union {
            uTimeout: UINT,
            uVersion: UINT,
        },
        balloonTitle: [64]WCHAR,
        dwInfoFlags: DWORD
    }

--End of Structs

-- Common Constants
    --GDI Constants
        global PS_SOLID: cint = 0
    --End of GDI Constants
    -- Custom Draw Constants
        global CDRF_DODEFAULT         :  LRESULT <comptime> = 0
        global CDRF_NEWFONT           :  LRESULT <comptime> = 2
        global CDRF_SKIPDEFAULT       :  LRESULT <comptime> = 4
        global CDRF_DOERASE           :  LRESULT <comptime> = 8
        global CDRF_NOTIFYPOSTPAINT   :  LRESULT <comptime> = 16
        global CDRF_NOTIFYITEMDRAW    :  LRESULT <comptime> = 32
        global CDRF_NOTIFYSUBITEMDRAW :  LRESULT <comptime> = 32
        global CDRF_NOTIFYPOSTERASE   :  LRESULT <comptime> = 64
        global CDRF_NOTIFYITEMERASE   :  LRESULT <comptime> = 128
        global CDRF_SKIPPOSTPAINT     :  LRESULT <comptime> = 256

        global CDDS_PREPAINT      : DWORD <comptime> = 1     -- This comes second
        global CDDS_POSTPAINT     : DWORD <comptime> = 2     -- this coms last
        global CDDS_PREERASE      : DWORD <comptime> = 3  -- This comes first
        global CDDS_POSTERASE     : DWORD <comptime> = 4 -- This is 4rth combined ith pre erase
        global CDDS_ITEM          : DWORD <comptime> = 65536
        global CDDS_SUBITEM       : DWORD <comptime> = 0x20000
        global CDDS_ITEMPOSTERASE : DWORD <comptime> = CDDS_ITEM | CDDS_POSTERASE
        global CDDS_ITEMPOSTPAINT : DWORD <comptime> = CDDS_ITEM | CDDS_POSTPAINT
        global CDDS_ITEMPREERASE  : DWORD <comptime> = CDDS_ITEM | CDDS_PREERASE
        global CDDS_ITEMPREPAINT  : DWORD <comptime> = CDDS_ITEM | CDDS_PREPAINT
    -- End of Custom Draw Constants

    -- DrawText Constants
        global DT_BOTTOM : UINT <comptime> =8
        global DT_CALCRECT : UINT <comptime> =1024
        global DT_CENTER : UINT <comptime> =1
        global DT_EDITCONTROL : UINT <comptime> =8192
        global DT_END_ELLIPSIS : UINT <comptime> =32768
        global DT_PATH_ELLIPSIS : UINT <comptime> =16384
        global DT_WORD_ELLIPSIS : UINT <comptime> =0x40000
        global DT_EXPANDTABS : UINT <comptime> =64
        global DT_EXTERNALLEADING : UINT <comptime> =512
        global DT_LEFT : UINT <comptime> =0
        global DT_MODIFYSTRING : UINT <comptime> =65536
        global DT_NOCLIP : UINT <comptime> =256
        global DT_NOPREFIX : UINT <comptime> =2048
        global DT_RIGHT : UINT <comptime> =2
        global DT_RTLREADING : UINT <comptime> =131072
        global DT_SINGLELINE : UINT <comptime> =32
        global DT_TABSTOP : UINT <comptime> =128
        global DT_TOP : UINT <comptime> =0
        global DT_VCENTER : UINT <comptime> =4
        global DT_WORDBREAK : UINT <comptime> =16
        global DT_INTERNAL : UINT <comptime> =4096
        global DT_NOFULLWIDTHCHARBREAK : UINT <comptime> = 0x00080000
        global DT_HIDEPREFIX : UINT <comptime> = 0x00100000
        global DT_PREFIXONLY : UINT <comptime> = 0x00200000
    -- End of DrawText Constants

    -- Menu Constants
        global MF_POPUP : DWORD <comptime> = 0x00000010
        global MF_STRING : DWORD <comptime> = 0x00000000
        global MF_SEPARATOR : DWORD <comptime> = 0x00000800
        global MF_CHECKED : DWORD <comptime> = 0x00000008
        global MNS_NOTIFYBYPOS : DWORD <comptime> = 0x08000000

        global MIM_STYLE : DWORD <comptime> = 0x00000010
        global TPM_LEFTBUTTON : DWORD <comptime> = 0x0000
        global TPM_RIGHTBUTTON : DWORD <comptime> = 0x0002
        global MF_OWNERDRAW : DWORD <comptime> = 0x00000100

        global MIIM_STATE : DWORD <comptime> = 0x00000001
        global MIIM_ID : DWORD <comptime> = 0x00000002
        global MIIM_SUBMENU : DWORD <comptime> = 0x00000004
        global MIIM_CHECKMARKS : DWORD <comptime> = 0x00000008
        global MIIM_TYPE : DWORD <comptime> = 0x00000010
        global MIIM_DATA : DWORD <comptime> = 0x00000020
        global MIIM_STRING : DWORD <comptime> = 0x00000040
        global MIIM_BITMAP : DWORD <comptime> = 0x00000080
        global MIIM_FTYPE : DWORD <comptime> = 0x00000100
        global MIM_MENUDATA : DWORD <comptime> = 0x00000008

        global MF_INSERT : DWORD <comptime> = 0x00000000
        global MF_CHANGE : DWORD <comptime> = 0x00000080
        global MF_APPEND : DWORD <comptime> = 0x00000100
        global MF_DELETE : DWORD <comptime> = 0x00000200
        global MF_REMOVE : DWORD <comptime> = 0x00001000
        global MF_BYCOMMAND : DWORD <comptime> = 0x00000000
        global MF_BYPOSITION : DWORD <comptime> = 0x00000400
        global MF_ENABLED : DWORD <comptime> = 0x00000000
        global MF_GRAYED : DWORD <comptime> = 0x00000001
        global MF_DISABLED : DWORD <comptime> = 0x00000002
        global MF_UNCHECKED : DWORD <comptime> = 0x00000000

        global MF_USECHECKBITMAPS : DWORD <comptime> = 0x00000200
        global MF_BITMAP : DWORD <comptime> = 0x00000004
        global MF_MENUBARBREAK : DWORD <comptime> = 0x00000020
        global MF_MENUBREAK : DWORD <comptime> = 0x00000040
        global MF_UNHILITE : DWORD <comptime> = 0x00000000
        global MF_HILITE : DWORD <comptime> = 0x00000080
        global MF_DEFAULT : DWORD <comptime> = 0x00001000
        global MF_SYSMENU : DWORD <comptime> = 0x00002000
        global MF_HELP : DWORD <comptime> = 0x00004000
        global MF_RIGHTJUSTIFY : DWORD <comptime> = 0x00004000
        global MF_MOUSESELECT : DWORD <comptime> = 0x00008000
        global MF_END : DWORD <comptime> = 0x00000080
    --End of Menu Constnts
-- End of Common Constants


local function MultiByteToWideChar(CodePage: cuint, dwFlags: culong, lpMultiByteStr: LPCCH, cbMultiByte: cint, lpWideCharStr: LPWSTR, cchWideChar: cint): cint <cimport,cinclude'<windows.h>',nodecl> end
local function WideCharToMultiByte(CodePage: cuint, dwFlags: culong, lpWideCharStr: LPCWCH, cchWideChar: cint, lpMultiByteStr: LPSTR, cbMultiByte: cint, lpDefaultChar: LPCCH, lpUsedDefaultChar: LPBOOL): cint <cimport,cinclude'<windows.h>',nodecl> end
local function wcslen(pstr: LPCWSTR) : isize <cimport,cinclude'<wchar.h>',nodecl> end

global function HandleToULong(h: pointer): culong <cimport,nodecl> end
global function HandleToLong(h: pointer): clong <cimport,nodecl> end
global function ULongToHandle(h: culong): pointer <cimport,nodecl> end
global function LongToHandle(h: clong): pointer <cimport,nodecl> end
global function PtrToUlong(p: pointer): culong <cimport,nodecl> end
global function PtrToUint(p: pointer): cuint <cimport,nodecl> end
global function PtrToUshort(p: pointer): cushort <cimport,nodecl> end
global function PtrToLong(p: pointer): clong <cimport,nodecl> end
global function PtrToInt(p: pointer): cint <cimport,nodecl> end
global function PtrToShort(p: pointer): cshort <cimport,nodecl> end
global function IntToPtr(i: cint): pointer <cimport,nodecl> end
global function UIntToPtr(ui: cuint): pointer <cimport,nodecl> end
global function LongToPtr(l: clong): pointer <cimport,nodecl> end
global function ULongToPtr(ul: culong): pointer <cimport,nodecl> end
global function Ptr32ToPtr(p: pointer): pointer <cimport,nodecl> end
global function Handle32ToHandle(h: pointer): pointer <cimport,nodecl> end
global function PtrToPtr32(p: pointer): pointer <cimport,nodecl, cinclude 'winuser.h'> end
global function MapWindowPoints(hf: HWND, ht: HWND, lpp: LPPOINT, cp: UINT): cint <cimport,nodecl, cinclude 'winuser.h'> end
global function CreatePopupMenu(): HMENU <cimport,nodecl> end
global function InsertMenuItemW(hm: HMENU, item: UINT, fby: BOOL, lpmi: LPCMENUITEMINFO): BOOL <cimport,nodecl> end
global function FrameRect(dch : HDC, rct : LPRECT, hbr : HBRUSH) : cint <cimport,nodecl> end
global function DrawTextW(hdc : HDC, lp_txt : LPCWSTR, cch_txt : cint, lprc : LPRECT, format : UINT) : cint <cimport,nodecl> end
global function TrackPopupMenu(hmenu: HMENU, uFlags: UINT, x: cint, y: cint, nReserved: cint, hwnd: HWND, prc: LPRECT) : cint <cimport,nodecl> end
global function DestroyMenu(hmenu: HMENU) : BOOL <cimport,nodecl> end
global function SetTimer(hWnd: HWND, nID: UINT_PTR, uEla: UINT, lpfn: TIMERPROC) : UINT_PTR <cimport,nodecl> end
global function KillTimer(hWnd: HWND, nID: UINT_PTR) : BOOL <cimport,nodecl> end


global function makeIntResW(i : auto) : LPCWSTR return (@LPCWSTR)((pointer)((@*culong)(i))) end
global IDI_APPLICATION = makeIntResW(32512) --(@LPCWSTR)(p_res_id)
global IDC_ARROW = makeIntResW(32512) --makeIntResW(32512) --(@LPCWSTR)(p_res_id)
global IDI_ERROR = makeIntResW(32513)
global IDI_QUESTION = makeIntResW(32514)
global IDI_EXCLAMATION = makeIntResW(32515)
global IDC_ASTERIK = makeIntResW(32516)
global IDI_WINLOGO = makeIntResW(32517)
global IDI_SHIELD = makeIntResW(32518)
global IMAGE_BITMAP: UINT <comptime> = 0
global IMAGE_ICON: UINT <comptime> = 1
global IMAGE_CURSOR: UINT <comptime> = 2

--global function LoadLibraryExW(lpLibFileName: LPCWSTR, hFile: HANDLE, dwFlags: culong): HMODULE <cimport,nodecl> end
--global function GetModuleHandleExW(dwFlags: culong, lpModuleName: LPCWSTR, phModule: *HMODULE): cint <cimport,nodecl> end
global function GetModuleHandleW(lpModuleName: LPCWSTR): HMODULE <cimport,nodecl> end
--global function LoadLibraryW(lpLibFileName: LPCWSTR): HMODULE <cimport,nodecl> end
--global function FreeLibrary(hLibModule: HMODULE): cint <cimport,nodecl> end


global function InitCommonControlsEx(piccEx : LPINITCOMMONCONTROLSEX): BOOL <cimport, cinclude'<commctrl.h>',nodecl> end
--global function SetWindowTheme(hWnd: HWND, sApp : LPCWSTR, subId : LPCWSTR): HRESULT <cimport,nodecl> end
global function Sleep(dwMilliseconds: culong): void <cimport,nodecl> end
global function Beep(dwFreq: culong, dwDuration: culong): cint <cimport,nodecl> end

-- global function FormatMessageW(dwFlags: culong, lpSource: LPCVOID, dwMessageId: culong, dwLanguageId: culong, lpBuffer: LPWSTR, nSize: culong, Arguments: *cvalist): culong <cimport,nodecl> end

global function GetSystemMetrics(nIndex: cint): cint <cimport,nodecl> end
global function DeleteDC(hdc: HDC): cint <cimport,nodecl> end
global function DeleteObject(ho: HGDIOBJ): cint <cimport,nodecl> end
global function GetMessageW(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: cuint, wMsgFilterMax: cuint): cint <cimport,nodecl> end
global function TranslateMessage(lpMsg: LPMSG): clonglong <cimport,nodecl> end
global function DispatchMessageW(lpMsg: LPMSG): clonglong <cimport,nodecl> end
global function SendMessageW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM): clonglong <cimport,nodecl> end
global function SendNotifyMessageW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM): clonglong <cimport,nodecl> end

global function PostMessageW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM): clonglong <cimport,nodecl> end
global function DefWindowProcW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM): clonglong <cimport,nodecl> end
global function TrackMouseEvent(lpEventTrack: LPTRACKMOUSEEVENT): BOOL <cimport,nodecl> end
global function SetWindowTextW(hwnd: HWND, lpString: LPCWSTR): BOOL <cimport,nodecl> end
global function GetWindowTextLengthW(hwnd: HWND): cint <cimport,nodecl> end
global function GetWindowTextW(hwnd: HWND, lpString: LPWSTR, nMaxCount: cint): cint <cimport,nodecl> end
global function GetWindowRect(hwnd: HWND, lpRect: LPRECT): BOOL <cimport,nodecl> end
global function GetMessagePos(): DWORD <cimport,nodecl> end
global function PtInRect(lpRect: LPRECT <const>, pt : POINT): BOOL <cimport,nodecl> end
global function CreateMenu(): HMENU <cimport,nodecl> end
global function SetMenu (hwnd: HWND, hmenu: HMENU): BOOL <cimport,nodecl> end
global function AppendMenuW(hmenu: HMENU, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCWSTR): BOOL <cimport,nodecl> end

global function RegisterClassExW(a1: LPWNDCLASSEXW): cushort <cimport,nodecl> end

global function CreateWindowExW(dwExStyle: DWORD, lpClassName: LPCWSTR,
                                lpWindowName: LPCWSTR, dwStyle: DWORD,
                                X: cint, Y: cint, nWidth: cint, nHeight: cint,
                                hWndParent: HWND, hMenu: HMENU,
                                hInstance: HINSTANCE, lpParam: LPVOID): HWND <cimport,nodecl> end

global function DestroyWindow(hWnd: HWND): cint <cimport,nodecl> end
global function ShowWindow(hWnd: HWND, nCmdShow: cint): cint <cimport,nodecl> end
global function AnimateWindow(hWnd: HWND, dwTime: culong, dwFlags: culong): cint <cimport,nodecl> end
global function GetDC(hWnd: HWND): HDC <cimport,nodecl> end
global function ReleaseDC(hWnd: HWND, hDC: HDC): cint <cimport,nodecl> end
global function MessageBoxW(hWnd: HWND, lpText: LPCWSTR, lpCaption: LPCWSTR, uType: cuint): cint <cimport,nodecl> end
global function LoadIconW(hInstance: HINSTANCE, lpIconName: LPCWSTR): HICON <cimport,nodecl> end
global function LoadImageW(hInst: HINSTANCE, lpIconName: LPCWSTR, typ: UINT, cx: cint, cy: cint, ful: UINT): HICON <cimport,nodecl> end

global function LoadCursorW(hInstance: HINSTANCE, lpCursorName: LPCWSTR): HCURSOR <cimport,nodecl> end
global function DestroyIcon(hico: HICON): BOOL <cimport,nodecl> end

global function SetWindowLongPtrW(hWnd: HWND, nIndex: cint, dwNewLong : LONG_PTR): LONG_PTR <cimport,nodecl> end
global function GetWindowLongPtrW(hWnd: HWND, nIndex: cint): LONG_PTR <cimport,nodecl> end

global function DefWindowProcW(hWnd: HWND, Msg: UINT, wParam : WPARAM, lParam : LPARAM): LRESULT <cimport,nodecl> end
global function PostQuitMessage(nExitCode: cint) <cimport,nodecl> end
global function GetDC(hWnd: HWND) : HDC <cimport,nodecl> end
global function GetModuleHandleW(lpModuleName: LPCWSTR) : HMODULE <cimport,nodecl> end
global function GetSystemMetrics(nIndex: cint) : cint <cimport,nodecl> end
global function CreateSolidBrush(color: COLORREF) : HBRUSH <cimport,nodecl> end
global function GetLastError(): DWORD <cimport,nodecl> end
global function UpdateWindow(hWnd: HWND): BOOL <cimport,nodecl> end
global function InvalidateRect(hWnd: HWND, lpRect: LPRECT, bErase: BOOL): BOOL <cimport,nodecl> end
global function FillRect(hDc: HDC, lprc: LPRECT, hbr: HBRUSH): cint <cimport,nodecl> end
global function GetClientRect(hWnd: HWND, lprc: LPRECT): BOOL <cimport,nodecl> end
global function RedrawWindow(hWnd: HWND, lprc: LPRECT, hrgnUpdate: HRGN, flags: UINT): BOOL <cimport,nodecl> end
global function SetWindowPos(hWnd: HWND, hWndInsertAfter: HWND, x: cint, y: cint, cx: cint, cy: cint, flags: UINT): BOOL <cimport,nodecl> end
global function GetCursorPos(lpPoing: LPPOINT): BOOL <cimport,nodecl> end
global function ScreenToClient(hWnd: HWND, lpPoing: LPPOINT): BOOL <cimport,nodecl> end
global function HideCaret(hWnd: HWND): BOOL <cimport,nodecl> end
global function DrawEdge(hdc: HDC, qrc: LPRECT, edge: UINT, grfFlags: UINT): BOOL <cimport,nodecl> end
global function SetForegroundWindow(hwnd: HWND): BOOL <cimport,nodecl> end
-- global function SetWindowLongPtrW(hWnd: HWND, nIndex: int32, dwNewLong: LONG_PTR): LONG_PTR <cimport,nodecl> end



global function SetWindowSubclass(hWnd: HWND, pfnSubclass: SUBCLASSPROC, uIdSubclass: UINT_PTR, dwRefData: DWORD_PTR): BOOL <cimport,nodecl> end
global function RemoveWindowSubclass(hWnd: HWND, pfnSubclass: SUBCLASSPROC, uIdSubclass: UINT_PTR): BOOL <cimport,nodecl> end
global function DefSubclassProc(hWnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT <cimport,nodecl> end


global function SetTextColor(hdc: HDC, clr: COLORREF): COLORREF <cimport,nodecl> end
global function SetBkMode(hdc: HDC, mode: cint): cint <cimport,nodecl> end
global function DrawTextW(hdc: HDC, lpchText: LPCWSTR, cchText: cint, lprc: LPRECT, format: UINT ): cint <cimport,nodecl> end
global function SelectObject(hdc: HDC, h: HGDIOBJ): HGDIOBJ <cimport,nodecl> end
global function RoundRect(hdc: HDC, left: cint, top: cint, right: cint, bottom: cint, width: cint, heighy: cint): BOOL <cimport,nodecl> end
global function FillPath(hdc: HDC): BOOL <cimport,nodecl> end
global function CreatePen(iStyle: cint, cWidth: cint, color: COLORREF): HPEN <cimport,nodecl> end
global function CreateCompatibleDC(hdc: HDC): HDC <cimport,nodecl> end
global function CreateCompatibleBitmap(hdc: HDC, cx: cint, cy: cint): HBITMAP <cimport,nodecl> end
global function CreatePatternBrush(hbm: HBITMAP): HBRUSH <cimport,nodecl> end
global function SetBkColor(hdc : HDC, cref : COLORREF) : COLORREF <cimport,nodecl> end
global function GetTextExtentPoint32W(hdc : HDC, lpString: LPCWSTR, c: cint, psize: LPSIZE) : BOOL <cimport,nodecl> end
global function GetStockObject(i : cint) : HGDIOBJ <cimport,nodecl> end
global function TextOutW(hdc: HDC, x: cint, y : cint, lpString: LPCWSTR, c: cint) : BOOL <cimport,nodecl> end
global function MoveToEx(hdc: HDC, x: cint, y : cint, lppt: LPPOINT) : BOOL <cimport,nodecl> end
global function LineTo(hdc: HDC, x: cint, y : cint) : BOOL <cimport,nodecl> end
global function Rectangle(hdc: HDC, left: cint, top: cint, right: cint, bottom: cint): BOOL <cimport,nodecl> end

global function GetOpenFileNameW(lpOfn: LPOPENFILENAMEW): BOOL <cimport,nodecl> end
global function GetSaveFileNameW(lpOfn: LPOPENFILENAMEW): BOOL <cimport,nodecl> end

global function SHBrowseForFolderW(p1: LPBROWSEINFOW): PIDLIST_ABSOLUTE <cimport,nodecl> end
global function SHGetPathFromIDListW(p1: PCIDLIST_ABSOLUTE, p2: LPWSTR): BOOL <cimport,nodecl> end
global function Shell_NotifyIconW(p1: DWORD, p2: *NOTIFYICONDATA): BOOL <cimport,nodecl> end

global function CoTaskMemFree(p1: LPVOID) <cimport,nodecl> end



--Utility Funcs

    local CP_UTF8: cuint <comptime> = 65001

    local function utf8_to_utf16(s: string): wstring
        local len: cint = MultiByteToWideChar(CP_UTF8, 0, s.data, s.size, nilptr, 0)
        --if len <= 0 then return wstring{} end -- empty or failed
        local data: span(cwchar_t) = default_allocator:spanalloc(@cwchar_t, len+1) -- allocate 1 extra for 0
        if MultiByteToWideChar(CP_UTF8, 0, s.data, s.size, &data[0], len) ~= len then -- failed?
            default_allocator:spandealloc(data)
            return wstring{}
        end
        data[len] = 0 -- set 0
        -- print(string.format("Text: %s,      In length: %d,    Out length: %d", s, #s, data.size))
        return (@wstring){data=data}
    end

    global function toUTF16(str : string) : LPCWSTR
        local result : wstring = utf8_to_utf16(str)
        return &result.data[0]
    end

    global function toWstrArray(str: string): wstring
        return utf8_to_utf16(str)
    end


    local function utf16_to_utf8(ws: wstring): string
        local len: cint = WideCharToMultiByte(CP_UTF8, 0, ws.data.data, ws.data.size, nilptr, 0, nilptr, nilptr)
        if len <= 0 then return string{} end -- empty or failed
        local s: string = string.create(len)
        if WideCharToMultiByte(CP_UTF8, 0, ws.data.data, ws.data.size, s.data, len, nilptr, nilptr) ~= len then -- failed?
            s:destroy()
            return string{}
        end
        return tostring(s)
    end

    global function toUTF8(wstr : wstring) : string
        return utf16_to_utf8(wstr)
    end

    global function wcharArrayToString(ws: *WCHAR, length: integer): string
        if length == 0 then length = wcslen(ws) end
        local len: cint = WideCharToMultiByte(CP_UTF8, 0, ws, length, nilptr, 0, nilptr, nilptr)
        if len <= 0 then return string{} end -- empty or failed
        local s: string = string.create(len)
        if WideCharToMultiByte(CP_UTF8, 0, ws, length, s.data, len, nilptr, nilptr) ~= len then -- failed?
            s:destroy()
            return string{}
        end
        return s
    end



--End Utility funcs






